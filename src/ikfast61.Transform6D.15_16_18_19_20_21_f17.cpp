/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-11-22 11:38:06.093698
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <ikfast_pr2/ikfast_left.h> // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKcos(j[3]);
x8=IKcos(j[1]);
x9=IKsin(j[3]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((IkReal(1.00000000000000))*(x12));
x15=((IkReal(0.180000000000000))*(x7));
x16=((IkReal(0.180000000000000))*(x5));
x17=((IkReal(0.321000000000000))*(x3));
x18=((IkReal(1.00000000000000))*(x1));
x19=((IkReal(0.180000000000000))*(x9));
x20=((IkReal(1.00000000000000))*(x13));
x21=((IkReal(1.00000000000000))*(x9));
x22=((IkReal(0.180000000000000))*(x6));
x23=((IkReal(1.00000000000000))*(x3));
x24=((x8)*(x9));
x25=((x0)*(x8));
x26=((x0)*(x3));
x27=((x0)*(x2));
x28=((x4)*(x7));
x29=((IkReal(-1.00000000000000))*(x7));
x30=((x1)*(x4));
x31=((x1)*(x8));
x32=((x2)*(x8));
x33=((x31)*(x7));
x34=((x21)*(x25));
x35=((x18)*(x24));
x36=((x23)*(x7)*(x8));
x37=((((x27)*(x4)))+(((IkReal(-1.00000000000000))*(x18)*(x3))));
x38=((x27)+(((IkReal(-1.00000000000000))*(x18)*(x3)*(x4))));
x39=((((x2)*(x30)))+(x26));
x40=((((IkReal(-1.00000000000000))*(x36)))+(((x4)*(x9))));
x41=((((IkReal(-1.00000000000000))*(x18)*(x2)))+(((IkReal(-1.00000000000000))*(x0)*(x23)*(x4))));
x42=((x37)*(x5));
x43=((x38)*(x7));
x44=((x39)*(x5));
x45=((((x21)*(x3)*(x8)))+(((IkReal(1.00000000000000))*(x28))));
x46=((x38)*(x9));
x47=((x41)*(x7));
x48=((x41)*(x9));
x49=((((x32)*(x5)))+(((x40)*(x6))));
x50=((((IkReal(-1.00000000000000))*(x1)*(x24)))+(x43));
x51=((((x32)*(x6)))+(((x5)*(((((IkReal(-1.00000000000000))*(x21)*(x4)))+(x36))))));
x52=((((IkReal(-1.00000000000000))*(x18)*(x7)*(x8)))+(((IkReal(-1.00000000000000))*(x21)*(x38))));
x53=((x13)*(x49));
x54=((((IkReal(-1.00000000000000))*(x0)*(x24)))+(x47));
x55=((x50)*(x6));
x56=((((IkReal(-1.00000000000000))*(x48)))+(((x25)*(x29))));
x57=((x54)*(x6));
x58=((x44)+(x55));
x59=((((x6)*(((((IkReal(-1.00000000000000))*(x34)))+(x47)))))+(x42));
x60=((((x5)*(((((x29)*(x38)))+(x35)))))+(((x39)*(x6))));
x61=((((x5)*(((((x29)*(x41)))+(x34)))))+(((x37)*(x6))));
x62=((x13)*(x59));
eerot[0]=((((x11)*(x61)))+(((x10)*(((((x12)*(x56)))+(x62))))));
eerot[1]=((((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x59)))+(((IkReal(-1.00000000000000))*(x14)*(x56)))))))+(((x10)*(x61))));
eerot[2]=((((x13)*(((x48)+(((x25)*(x7)))))))+(((x12)*(((x42)+(x57))))));
eetrans[0]=((((x9)*(((((IkReal(-1.00000000000000))*(x0)*(x17)*(x4)))+(((IkReal(-0.321000000000000))*(x1)*(x2)))))))+(((IkReal(0.100000000000000))*(x0)))+(((IkReal(0.321000000000000))*(x25)*(x7)))+(((IkReal(0.400000000000000))*(x25)))+(((x12)*(((((x16)*(x37)))+(((x22)*(x54)))))))+(((x13)*(((((x19)*(x41)))+(((x15)*(x25))))))));
eerot[3]=((((x11)*(x60)))+(((x10)*(((((x13)*(x58)))+(((x12)*(x52))))))));
eerot[4]=((((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x58)))+(((IkReal(-1.00000000000000))*(x14)*(x52)))))))+(((x10)*(x60))));
eerot[5]=((((x13)*(((x33)+(x46)))))+(((x12)*(((((x6)*(((((IkReal(-1.00000000000000))*(x35)))+(x43)))))+(x44))))));
eetrans[1]=((IkReal(0.188000000000000))+(((IkReal(0.100000000000000))*(x1)))+(((x13)*(((((x19)*(x38)))+(((x15)*(x31)))))))+(((IkReal(0.321000000000000))*(x33)))+(((IkReal(0.400000000000000))*(x31)))+(((x9)*(((((IkReal(-1.00000000000000))*(x17)*(x30)))+(((IkReal(0.321000000000000))*(x27)))))))+(((x12)*(((((x16)*(x39)))+(((x22)*(x50))))))));
eerot[6]=((((x11)*(x51)))+(((x10)*(((x53)+(((x12)*(x45))))))));
eerot[7]=((((x10)*(x51)))+(((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x49)))+(((IkReal(-1.00000000000000))*(x14)*(x45))))))));
eerot[8]=((((x12)*(x49)))+(((IkReal(-1.00000000000000))*(x13)*(x45))));
eetrans[2]=((((x13)*(((((IkReal(-1.00000000000000))*(x19)*(x3)*(x8)))+(((IkReal(-1.00000000000000))*(x15)*(x4)))))))+(((x12)*(((((x16)*(x32)))+(((x22)*(x40)))))))+(((IkReal(-1.00000000000000))*(x17)*(x24)))+(((IkReal(-0.400000000000000))*(x4)))+(((IkReal(-0.321000000000000))*(x28))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j15,cj15,sj15,htj15,j16,cj16,sj16,htj16,j18,cj18,sj18,htj18,j19,cj19,sj19,htj19,j20,cj20,sj20,htj20,j21,cj21,sj21,htj21,j17,cj17,sj17,htj17,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij15[2], _nj15,_ij16[2], _nj16,_ij18[2], _nj18,_ij19[2], _nj19,_ij20[2], _nj20,_ij21[2], _nj21,_ij17[2], _nj17;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j18=numeric_limits<IkReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1; j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1;  _ij17[0] = -1; _ij17[1] = -1; _nj17 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j17=pfree[0]; cj17=cos(pfree[0]); sj17=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((IkReal(-0.180000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(-0.188000000000000))+(((IkReal(-0.180000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((pz)+(((IkReal(-0.180000000000000))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=((IkReal(-1.00000000000000))*(py));
IkReal gconst1;
gconst1=((IkReal(0.642000000000000))*(sj17));
IkReal gconst2;
gconst2=((IkReal(-1.00000000000000))*(py));
IkReal gconst3;
gconst3=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst4;
gconst4=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst5;
gconst5=((IkReal(-1.00000000000000))*(py));
IkReal gconst6;
gconst6=((IkReal(0.642000000000000))*(sj17));
IkReal gconst7;
gconst7=((IkReal(-1.00000000000000))*(py));
IkReal gconst8;
gconst8=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst9;
gconst9=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst10;
gconst10=((IkReal(2.00000000000000))*(px));
IkReal gconst11;
gconst11=((IkReal(2.00000000000000))*(px));
IkReal gconst12;
gconst12=((IkReal(0.400000000000000))*(py));
IkReal gconst13;
gconst13=((IkReal(0.400000000000000))*(py));
IkReal gconst14;
gconst14=((IkReal(2.00000000000000))*(px));
IkReal gconst15;
gconst15=((IkReal(2.00000000000000))*(px));
IkReal gconst16;
gconst16=((IkReal(0.400000000000000))*(py));
IkReal gconst17;
gconst17=((IkReal(0.400000000000000))*(py));
IkReal gconst18;
gconst18=py;
IkReal gconst19;
gconst19=((IkReal(0.642000000000000))*(sj17));
IkReal gconst20;
gconst20=py;
IkReal gconst21;
gconst21=((IkReal(0.509841000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst22;
gconst22=((IkReal(-0.00375900000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst23;
gconst23=py;
IkReal gconst24;
gconst24=((IkReal(0.642000000000000))*(sj17));
IkReal gconst25;
gconst25=py;
IkReal gconst26;
gconst26=((IkReal(0.509841000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst27;
gconst27=((IkReal(-0.00375900000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal x63=((gconst20)*(gconst21));
IkReal x64=((gconst23)*(gconst27));
IkReal x65=((gconst25)*(gconst26));
IkReal x66=((gconst18)*(gconst22));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x64)*(x66)))+(((IkReal(-1.00000000000000))*(x63)*(x65)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst22)*(gconst24)*(gconst26)))+(((x63)*(x64)))+(((x65)*(x66))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x67=((IkReal(1.00000000000000))*(gconst8));
IkReal x68=((gconst3)*(gconst7));
IkReal x69=((gconst0)*(gconst8));
IkReal x70=((gconst13)*(gconst15));
IkReal x71=((IkReal(1.00000000000000))*(gconst22));
IkReal x72=((gconst19)*(gconst24));
IkReal x73=((gconst0)*(gconst9));
IkReal x74=((gconst1)*(gconst6));
IkReal x75=((gconst27)*(gconst5));
IkReal x76=((gconst2)*(gconst3));
IkReal x77=((IkReal(1.00000000000000))*(gconst4));
IkReal x78=((gconst17)*(gconst5));
IkReal x79=((gconst12)*(gconst14));
IkReal x80=((gconst2)*(gconst9));
IkReal x81=((IkReal(1.00000000000000))*(gconst16));
IkReal x82=((gconst18)*(gconst25));
IkReal x83=((gconst12)*(gconst7));
IkReal x84=((gconst18)*(gconst9));
IkReal x85=((gconst20)*(gconst27));
IkReal x86=((gconst26)*(gconst4));
IkReal x87=((gconst1)*(gconst24));
IkReal x88=((gconst11)*(gconst3));
IkReal x89=((IkReal(1.00000000000000))*(gconst26));
IkReal x90=((gconst20)*(gconst21));
IkReal x91=((gconst13)*(gconst16));
IkReal x92=((gconst18)*(gconst23));
IkReal x93=((gconst21)*(gconst25));
IkReal x94=((gconst2)*(gconst21));
IkReal x95=((gconst12)*(gconst2));
IkReal x96=((gconst5)*(gconst9));
IkReal x97=((gconst20)*(gconst3));
IkReal x98=((gconst4)*(gconst7));
IkReal x99=((gconst11)*(gconst12));
IkReal x100=((gconst14)*(gconst17));
IkReal x101=((gconst15)*(gconst4));
IkReal x102=((IkReal(1.00000000000000))*(gconst13));
IkReal x103=((gconst10)*(gconst8));
IkReal x104=((gconst0)*(gconst16));
IkReal x105=((gconst23)*(gconst27));
IkReal x106=((gconst22)*(gconst25));
IkReal x107=((gconst10)*(gconst16));
IkReal x108=((gconst19)*(gconst6));
IkReal x109=((gconst22)*(gconst7));
IkReal x110=((gconst0)*(gconst7));
IkReal x111=((gconst17)*(gconst23));
IkReal x112=((gconst10)*(gconst14));
IkReal x113=((gconst11)*(gconst21));
IkReal x114=((gconst12)*(gconst20));
IkReal x115=((gconst18)*(gconst26));
IkReal x116=((gconst14)*(gconst9));
IkReal x117=((gconst13)*(gconst7));
IkReal x118=((gconst16)*(gconst22));
IkReal x119=((gconst23)*(x90));
IkReal x120=((gconst10)*(gconst25)*(gconst26));
IkReal x121=((gconst15)*(gconst22)*(gconst26));
IkReal x122=((gconst14)*(gconst18)*(gconst27));
op[0]=((((IkReal(-1.00000000000000))*(gconst26)*(x71)*(x72)))+(((IkReal(-1.00000000000000))*(gconst25)*(x89)*(x90)))+(((gconst22)*(gconst26)*(x82)))+(((IkReal(-1.00000000000000))*(gconst27)*(x71)*(x92)))+(((gconst21)*(gconst23)*(x85))));
op[1]=((((IkReal(-1.00000000000000))*(x122)*(x71)))+(((IkReal(-1.00000000000000))*(gconst25)*(x81)*(x90)))+(((gconst13)*(gconst26)*(x82)))+(((gconst10)*(gconst26)*(x106)))+(((IkReal(-1.00000000000000))*(gconst11)*(x89)*(x93)))+(((gconst14)*(gconst21)*(x85)))+(((IkReal(-1.00000000000000))*(gconst17)*(x71)*(x92)))+(((IkReal(-1.00000000000000))*(gconst27)*(x102)*(x92)))+(((IkReal(-1.00000000000000))*(gconst25)*(x114)*(x89)))+(((IkReal(-1.00000000000000))*(gconst16)*(x71)*(x72)))+(((IkReal(-1.00000000000000))*(gconst13)*(x72)*(x89)))+(((x111)*(x90)))+(((gconst15)*(gconst22)*(x115)))+(((x118)*(x82)))+(((x105)*(x113)))+(((IkReal(-1.00000000000000))*(gconst10)*(x105)*(x71)))+(((IkReal(-1.00000000000000))*(gconst15)*(x89)*(x90)))+(((gconst12)*(gconst23)*(x85))));
op[2]=((((IkReal(-1.00000000000000))*(gconst15)*(x81)*(x90)))+(((IkReal(-1.00000000000000))*(gconst27)*(x112)*(x71)))+(((gconst15)*(gconst18)*(x118)))+(((x79)*(x85)))+(((x100)*(x90)))+(((x82)*(x91)))+(((x106)*(x107)))+(((x111)*(x114)))+(((x111)*(x113)))+(((x82)*(x86)))+(((gconst23)*(gconst3)*(x85)))+(((gconst14)*(gconst27)*(x113)))+(((IkReal(-1.00000000000000))*(gconst22)*(x67)*(x72)))+(((IkReal(-1.00000000000000))*(gconst17)*(x102)*(x92)))+(((x115)*(x70)))+(((IkReal(-1.00000000000000))*(gconst25)*(x89)*(x99)))+(((IkReal(-1.00000000000000))*(gconst25)*(x89)*(x97)))+(((IkReal(-1.00000000000000))*(gconst25)*(x67)*(x90)))+(((x109)*(x115)))+(((gconst9)*(x119)))+(((IkReal(-1.00000000000000))*(gconst25)*(x114)*(x81)))+(((IkReal(-1.00000000000000))*(gconst26)*(x71)*(x87)))+(((IkReal(-1.00000000000000))*(gconst11)*(x81)*(x93)))+(((gconst22)*(gconst8)*(x82)))+(((x75)*(x90)))+(((gconst13)*(x120)))+(((gconst0)*(gconst26)*(x106)))+(((IkReal(-1.00000000000000))*(gconst18)*(x71)*(x75)))+(((IkReal(-1.00000000000000))*(gconst13)*(x72)*(x81)))+(((IkReal(-1.00000000000000))*(gconst10)*(x102)*(x105)))+(((IkReal(-1.00000000000000))*(gconst23)*(x71)*(x84)))+(((gconst10)*(x121)))+(((IkReal(-1.00000000000000))*(gconst7)*(x89)*(x90)))+(((IkReal(-1.00000000000000))*(gconst2)*(x89)*(x93)))+(((IkReal(-1.00000000000000))*(gconst0)*(x105)*(x71)))+(((IkReal(-1.00000000000000))*(gconst15)*(x113)*(x89)))+(((IkReal(-1.00000000000000))*(gconst10)*(x111)*(x71)))+(((IkReal(-1.00000000000000))*(x102)*(x122)))+(((x105)*(x99)))+(((x105)*(x94)))+(((IkReal(-1.00000000000000))*(gconst26)*(x72)*(x77)))+(((IkReal(-1.00000000000000))*(gconst26)*(x108)*(x71)))+(((IkReal(-1.00000000000000))*(gconst27)*(x77)*(x92)))+(((IkReal(-1.00000000000000))*(gconst18)*(x100)*(x71)))+(((IkReal(-1.00000000000000))*(gconst15)*(x114)*(x89))));
op[3]=((((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst23)*(gconst4)))+(((gconst16)*(gconst18)*(gconst25)*(gconst4)))+(((gconst15)*(gconst18)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst22)*(gconst6)))+(((gconst11)*(gconst12)*(gconst14)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst21)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst27)))+(((gconst0)*(gconst16)*(gconst22)*(gconst25)))+(((gconst0)*(gconst15)*(gconst22)*(gconst26)))+(((gconst14)*(gconst2)*(gconst21)*(gconst27)))+(((gconst10)*(gconst13)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst21)*(gconst25)))+(((gconst11)*(gconst23)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst17)*(gconst23)))+(((gconst11)*(gconst14)*(gconst17)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst26)*(gconst3)))+(((gconst12)*(gconst14)*(gconst17)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst22)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst25)*(gconst3)))+(((gconst11)*(gconst21)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst26)*(gconst7)))+(((gconst14)*(gconst20)*(gconst21)*(gconst9)))+(((gconst16)*(gconst18)*(gconst22)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst22)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst21)*(gconst26)))+(((gconst12)*(gconst20)*(gconst23)*(gconst9)))+(((gconst13)*(gconst18)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst20)))+(((gconst10)*(gconst25)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst27)*(gconst5)))+(((gconst14)*(gconst20)*(gconst27)*(gconst3)))+(((gconst15)*(gconst18)*(gconst26)*(gconst4)))+(((gconst13)*(gconst15)*(gconst16)*(gconst18)))+(((gconst10)*(gconst22)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst22)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst21)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst17)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst24)*(gconst8)))+(((gconst11)*(gconst12)*(gconst17)*(gconst23)))+(((gconst12)*(gconst2)*(gconst23)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((gconst17)*(gconst20)*(gconst23)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst26)*(gconst6)))+(((gconst17)*(gconst20)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst25)*(gconst26)))+(((gconst10)*(gconst15)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst22)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst23)*(gconst27)))+(((gconst11)*(gconst21)*(gconst27)*(gconst5)))+(((gconst13)*(gconst18)*(gconst26)*(gconst7)))+(((gconst17)*(gconst2)*(gconst21)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst23)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst22)*(gconst27)))+(((gconst0)*(gconst13)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst24)*(gconst26)))+(((gconst10)*(gconst22)*(gconst26)*(gconst7)))+(((gconst12)*(gconst20)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst24)*(gconst4)))+(((gconst10)*(gconst13)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst25)*(gconst8))));
op[4]=((((gconst12)*(gconst14)*(gconst2)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst23)*(gconst4)))+(((gconst10)*(gconst15)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst5)))+(((gconst2)*(gconst23)*(gconst27)*(gconst3)))+(((gconst18)*(gconst22)*(gconst7)*(gconst8)))+(((gconst14)*(gconst17)*(gconst2)*(gconst21)))+(((gconst20)*(gconst27)*(gconst3)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst21)*(gconst25)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst27)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst21)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst2)*(gconst26)))+(((gconst10)*(gconst16)*(gconst22)*(gconst7)))+(((gconst13)*(gconst15)*(gconst18)*(gconst8)))+(((gconst12)*(gconst17)*(gconst2)*(gconst23)))+(((gconst10)*(gconst13)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst16)*(gconst24)))+(((gconst11)*(gconst14)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst14)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst24)*(gconst8)))+(((gconst18)*(gconst25)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst20)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst9)))+(((gconst0)*(gconst13)*(gconst16)*(gconst25)))+(((gconst13)*(gconst16)*(gconst18)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst26)*(gconst3)*(gconst7)))+(((gconst11)*(gconst12)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst17)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst25)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst20)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst26)*(gconst4)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst2)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst22)*(gconst9)))+(((gconst10)*(gconst13)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst5)*(gconst9)))+(((gconst10)*(gconst13)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((gconst0)*(gconst13)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst2)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst21)*(gconst7)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst25)*(gconst26)*(gconst3)))+(((gconst2)*(gconst21)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst4)))+(((gconst2)*(gconst21)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst19)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst8)))+(((gconst12)*(gconst14)*(gconst20)*(gconst9)))+(((gconst18)*(gconst26)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst23)*(gconst27)*(gconst4)))+(((gconst20)*(gconst21)*(gconst5)*(gconst9)))+(((gconst11)*(gconst12)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst22)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst26)*(gconst6)))+(((gconst10)*(gconst15)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst23)*(gconst9)))+(((gconst11)*(gconst17)*(gconst23)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst22)*(gconst5)))+(((gconst0)*(gconst15)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst21)*(gconst7)))+(((gconst0)*(gconst25)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst24)*(gconst4)*(gconst8)))+(((gconst0)*(gconst22)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst23)*(gconst4)*(gconst9)))+(((gconst11)*(gconst14)*(gconst21)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst25)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst21)*(gconst8)))+(((gconst14)*(gconst17)*(gconst20)*(gconst3)))+(((gconst12)*(gconst17)*(gconst20)*(gconst5)))+(((gconst11)*(gconst17)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst22)*(gconst6)*(gconst8)))+(((gconst15)*(gconst16)*(gconst18)*(gconst4)))+(((gconst0)*(gconst22)*(gconst26)*(gconst7)))+(((gconst20)*(gconst23)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst24)*(gconst26)*(gconst4)))+(((gconst10)*(gconst16)*(gconst25)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst17)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst20)*(gconst3))));
op[5]=((((gconst0)*(gconst13)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst25)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst4)*(gconst6)))+(((gconst17)*(gconst20)*(gconst3)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst27)*(gconst4)))+(((gconst10)*(gconst15)*(gconst16)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst23)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst3)*(gconst7)))+(((gconst12)*(gconst20)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst22)*(gconst9)))+(((gconst11)*(gconst14)*(gconst17)*(gconst3)))+(((gconst0)*(gconst15)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst21)*(gconst8)))+(((gconst10)*(gconst25)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst22)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst26)*(gconst3)*(gconst7)))+(((gconst17)*(gconst2)*(gconst23)*(gconst3)))+(((gconst0)*(gconst16)*(gconst25)*(gconst4)))+(((gconst10)*(gconst26)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst8)))+(((gconst14)*(gconst2)*(gconst21)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst27)*(gconst5)))+(((gconst17)*(gconst2)*(gconst21)*(gconst5)))+(((gconst12)*(gconst14)*(gconst17)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst21)*(gconst7)))+(((gconst11)*(gconst23)*(gconst3)*(gconst9)))+(((gconst10)*(gconst13)*(gconst16)*(gconst7)))+(((gconst11)*(gconst12)*(gconst17)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst25)*(gconst8)))+(((gconst12)*(gconst2)*(gconst27)*(gconst5)))+(((gconst11)*(gconst21)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst6)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst23)*(gconst4)*(gconst9)))+(((gconst0)*(gconst13)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst24)*(gconst4)))+(((gconst14)*(gconst20)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst3)))+(((gconst16)*(gconst18)*(gconst4)*(gconst7)))+(((gconst12)*(gconst2)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst26)*(gconst7)))+(((gconst10)*(gconst22)*(gconst7)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst24)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst7)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst17)*(gconst4)))+(((gconst13)*(gconst18)*(gconst7)*(gconst8)))+(((gconst10)*(gconst13)*(gconst15)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst7)*(gconst8)))+(((gconst14)*(gconst2)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst26)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst27)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst4)*(gconst9)))+(((gconst0)*(gconst15)*(gconst26)*(gconst4)))+(((gconst15)*(gconst18)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst17)*(gconst5)))+(((gconst0)*(gconst13)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst22)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst7)))+(((gconst11)*(gconst27)*(gconst3)*(gconst5)))+(((gconst0)*(gconst16)*(gconst22)*(gconst7))));
op[6]=((((IkReal(-1.00000000000000))*(gconst26)*(x74)*(x77)))+(((x110)*(x86)))+(((x96)*(x97)))+(((x96)*(x99)))+(((x79)*(x80)))+(((IkReal(-1.00000000000000))*(gconst2)*(x81)*(x83)))+(((IkReal(-1.00000000000000))*(gconst13)*(x74)*(x81)))+(((x107)*(x98)))+(((x78)*(x88)))+(((gconst23)*(gconst9)*(x76)))+(((x100)*(x76)))+(((IkReal(-1.00000000000000))*(gconst23)*(x73)*(x77)))+(((IkReal(-1.00000000000000))*(gconst25)*(x67)*(x76)))+(((IkReal(-1.00000000000000))*(gconst22)*(x67)*(x74)))+(((IkReal(-1.00000000000000))*(gconst15)*(x76)*(x81)))+(((x78)*(x95)))+(((IkReal(-1.00000000000000))*(gconst9)*(x112)*(x77)))+(((IkReal(-1.00000000000000))*(gconst14)*(x102)*(x73)))+(((IkReal(-1.00000000000000))*(gconst4)*(x108)*(x67)))+(((gconst18)*(gconst8)*(x98)))+(((x103)*(x117)))+(((x69)*(x70)))+(((IkReal(-1.00000000000000))*(gconst5)*(x71)*(x73)))+(((IkReal(-1.00000000000000))*(gconst10)*(x102)*(x96)))+(((IkReal(-1.00000000000000))*(gconst20)*(x67)*(x68)))+(((x75)*(x76)))+(((IkReal(-1.00000000000000))*(gconst2)*(x68)*(x89)))+(((IkReal(-1.00000000000000))*(gconst10)*(x77)*(x78)))+(((IkReal(-1.00000000000000))*(gconst0)*(x102)*(x78)))+(((gconst21)*(gconst5)*(x80)))+(((x109)*(x69)))+(((IkReal(-1.00000000000000))*(gconst11)*(x68)*(x81)))+(((x116)*(x88)))+(((IkReal(-1.00000000000000))*(gconst4)*(x67)*(x87)))+(((IkReal(-1.00000000000000))*(gconst11)*(x67)*(x83)))+(((IkReal(-1.00000000000000))*(gconst5)*(x77)*(x84)))+(((IkReal(-1.00000000000000))*(gconst0)*(x75)*(x77)))+(((IkReal(-1.00000000000000))*(gconst0)*(x100)*(x77)))+(((gconst25)*(gconst4)*(x69)))+(((x101)*(x103)))+(((x101)*(x104)))+(((IkReal(-1.00000000000000))*(gconst15)*(x67)*(x88)))+(((IkReal(-1.00000000000000))*(gconst7)*(x67)*(x94)))+(((x110)*(x91)))+(((IkReal(-1.00000000000000))*(gconst15)*(x67)*(x95))));
op[7]=((((x101)*(x69)))+(((IkReal(-1.00000000000000))*(gconst0)*(x77)*(x78)))+(((x103)*(x98)))+(((x116)*(x76)))+(((IkReal(-1.00000000000000))*(gconst13)*(x67)*(x74)))+(((gconst12)*(gconst5)*(x80)))+(((IkReal(-1.00000000000000))*(gconst2)*(x68)*(x81)))+(((IkReal(-1.00000000000000))*(gconst11)*(x67)*(x68)))+(((x88)*(x96)))+(((IkReal(-1.00000000000000))*(gconst16)*(x74)*(x77)))+(((IkReal(-1.00000000000000))*(gconst14)*(x73)*(x77)))+(((IkReal(-1.00000000000000))*(gconst2)*(x67)*(x83)))+(((x76)*(x78)))+(((IkReal(-1.00000000000000))*(gconst15)*(x67)*(x76)))+(((IkReal(-1.00000000000000))*(gconst10)*(x77)*(x96)))+(((x117)*(x69)))+(((x104)*(x98)))+(((IkReal(-1.00000000000000))*(gconst5)*(x102)*(x73))));
op[8]=((((IkReal(-1.00000000000000))*(gconst5)*(x73)*(x77)))+(((IkReal(-1.00000000000000))*(gconst2)*(x67)*(x68)))+(((x69)*(x98)))+(((x76)*(x96)))+(((IkReal(-1.00000000000000))*(gconst4)*(x67)*(x74))));
polyroots8(op,zeror,numroots);
IkReal j15array[8], cj15array[8], sj15array[8], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((IkReal(2.00000000000000))*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[8]={true,true,true,true,true,true,true,true};
_nj15 = 8;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst44;
IkReal x123=((IkReal(4.00000000000000))*(sj17));
IkReal x124=((IkReal(0.800000000000000))*(sj17));
IkReal x125=((py)*(sj15));
IkReal x126=((cj15)*(px));
gconst44=IKsign(((((IkReal(-8.00000000000000))*(sj17)*(x125)*(x126)))+(((IkReal(-1.00000000000000))*(x123)*((x126)*(x126))))+(((IkReal(-1.00000000000000))*(x123)*((pz)*(pz))))+(((IkReal(-1.00000000000000))*(x123)*((x125)*(x125))))+(((x124)*(x125)))+(((x124)*(x126)))+(((IkReal(-0.0400000000000000))*(sj17)))));
IkReal x127=((IkReal(20.0000000000000))*(sj17));
IkReal x128=((cj15)*(px));
IkReal x129=((py)*(sj15));
IkReal x130=((IkReal(100.000000000000))*(sj17));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x130)*((pz)*(pz))))+(((IkReal(-200.000000000000))*(sj17)*(x128)*(x129)))+(((IkReal(-1.00000000000000))*(x130)*((x129)*(x129))))+(((IkReal(-1.00000000000000))*(sj17)))+(((IkReal(-1.00000000000000))*(x130)*((x128)*(x128))))+(((x127)*(x129)))+(((x127)*(x128))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x131=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=x131;
evalcond[2]=x131;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst48;
IkReal x132=((IkReal(321.000000000000))*(cj18));
IkReal x133=((cj15)*(px));
IkReal x134=((py)*(sj15));
gconst48=IKsign(((IkReal(40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x133)))+(((IkReal(-400.000000000000))*(x134)))+(((IkReal(-1.00000000000000))*(x132)*(x133)))+(((IkReal(-1.00000000000000))*(x132)*(x134)))));
IkReal x135=((cj15)*(px));
IkReal x136=((IkReal(10.0000000000000))*(cj18));
IkReal x137=((py)*(sj15));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-1.00000000000000))*(x135)*(x136)))+(((IkReal(-12.4610591900312))*(x137)))+(((IkReal(-12.4610591900312))*(x135)))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(-1.00000000000000))*(x136)*(x137)))+(cj18));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x138=((IkReal(10.0000000000000))*(sj18));
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(sj15)*(x138)))+(((IkReal(-1.00000000000000))*(cj15)*(px)*(x138)))+(((IkReal(10.0000000000000))*(cj18)*(pz)))+(sj18)+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x139=((IkReal(321000.000000000))*(sj18));
IkReal x140=((py)*(sj15));
IkReal x141=((cj15)*(px));
IkReal x142=((IkReal(1000.00000000000))*(pz));
IkReal x143=((IkReal(321.000000000000))*(sj18));
IkReal x144=((cj18)*(pz));
if( IKabs(((((IKabs(((((IkReal(321000.000000000))*(x144)))+(((IkReal(-1.00000000000000))*(x139)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x141)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x144)))+(((IkReal(-1.00000000000000))*(x139)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x141)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(x140)*(x143)))+(((IkReal(321.000000000000))*(x144)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x141)*(x143))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(x140)*(x143)))+(((IkReal(321.000000000000))*(x144)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x141)*(x143)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((x140)*(x142)))+(((IkReal(-128.400000000000))*(sj18)))+(((x141)*(x142))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(321000.000000000))*(x144)))+(((IkReal(-1.00000000000000))*(x139)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x141)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x144)))+(((IkReal(-1.00000000000000))*(x139)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x141)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(x140)*(x143)))+(((IkReal(321.000000000000))*(x144)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x141)*(x143))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(x140)*(x143)))+(((IkReal(321.000000000000))*(x144)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x141)*(x143)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((x140)*(x142)))+(((IkReal(-128.400000000000))*(sj18)))+(((x141)*(x142)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(321000.000000000))*(x144)))+(((IkReal(-1.00000000000000))*(x139)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x141)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x144)))+(((IkReal(-1.00000000000000))*(x139)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x141)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(x140)*(x143)))+(((IkReal(321.000000000000))*(x144)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x141)*(x143))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(x140)*(x143)))+(((IkReal(321.000000000000))*(x144)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x141)*(x143)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((x140)*(x142)))+(((IkReal(-128.400000000000))*(sj18)))+(((x141)*(x142)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x145=IKsin(j16);
IkReal x146=IKcos(j16);
IkReal x147=((IkReal(0.321000000000000))*(sj18));
IkReal x148=((cj15)*(px));
IkReal x149=((IkReal(0.321000000000000))*(cj18));
IkReal x150=((py)*(sj15));
IkReal x151=((pz)*(x145));
IkReal x152=((IkReal(0.800000000000000))*(x146));
IkReal x153=((IkReal(1.00000000000000))*(x146));
evalcond[0]=((((IkReal(0.400000000000000))*(x145)))+(((x145)*(x149)))+(pz)+(((x146)*(x147))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x150)*(x153)))+(((IkReal(0.100000000000000))*(x146)))+(x151)+(x149)+(((IkReal(-1.00000000000000))*(x148)*(x153))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x148)))+(((x146)*(x149)))+(((IkReal(-1.00000000000000))*(x145)*(x147))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x146)))+(((IkReal(0.200000000000000))*(x148)))+(((IkReal(-0.800000000000000))*(x151)))+(((IkReal(0.200000000000000))*(x150)))+(((x150)*(x152)))+(((IkReal(-1.00000000000000))*(pp)))+(((x148)*(x152))));
evalcond[4]=((((pz)*(x146)))+(((IkReal(-0.100000000000000))*(x145)))+(((x145)*(x148)))+(x147)+(((x145)*(x150))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x302=((IkReal(1000.00000000000))*(pz));
if( IKabs(((gconst48)*(((((IkReal(-100.000000000000))*(pz)))+(((cj15)*(px)*(x302)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((py)*(sj15)*(x302)))+(((IkReal(128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((IkReal(-160.000000000000))+(((IkReal(-256.800000000000))*(cj18)))+(((IkReal(-103.041000000000))*((cj18)*(cj18))))+(((pz)*(x302))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst48)*(((((IkReal(-100.000000000000))*(pz)))+(((cj15)*(px)*(x302)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((py)*(sj15)*(x302)))+(((IkReal(128.400000000000))*(sj18)))))), ((gconst48)*(((IkReal(-160.000000000000))+(((IkReal(-256.800000000000))*(cj18)))+(((IkReal(-103.041000000000))*((cj18)*(cj18))))+(((pz)*(x302)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x303=IKsin(j16);
IkReal x304=IKcos(j16);
IkReal x305=((IkReal(0.321000000000000))*(sj18));
IkReal x306=((cj15)*(px));
IkReal x307=((IkReal(0.321000000000000))*(cj18));
IkReal x308=((py)*(sj15));
IkReal x309=((pz)*(x303));
IkReal x310=((IkReal(0.800000000000000))*(x304));
IkReal x311=((IkReal(1.00000000000000))*(x304));
evalcond[0]=((((x303)*(x307)))+(pz)+(((IkReal(0.400000000000000))*(x303)))+(((x304)*(x305))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x308)*(x311)))+(x309)+(x307)+(((IkReal(-1.00000000000000))*(x306)*(x311)))+(((IkReal(0.100000000000000))*(x304))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x303)*(x305)))+(((IkReal(-1.00000000000000))*(x306)))+(((IkReal(-1.00000000000000))*(x308)))+(((IkReal(0.400000000000000))*(x304)))+(((x304)*(x307))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x309)))+(((IkReal(-0.0800000000000000))*(x304)))+(((x308)*(x310)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x306)))+(((IkReal(0.200000000000000))*(x308)))+(((x306)*(x310))));
evalcond[4]=((((x303)*(x306)))+(((x303)*(x308)))+(x305)+(((IkReal(-0.100000000000000))*(x303)))+(((pz)*(x304))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x312=((cj15)*(py));
IkReal x313=((px)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))));
evalcond[1]=((x313)+(((IkReal(-1.00000000000000))*(x312))));
evalcond[2]=((x312)+(((IkReal(-1.00000000000000))*(x313))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x314=((IkReal(321.000000000000))*(cj18));
IkReal x315=((cj15)*(px));
IkReal x316=((py)*(sj15));
gconst49=IKsign(((IkReal(-40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(400.000000000000))*(x316)))+(((IkReal(400.000000000000))*(x315)))+(((IkReal(-32.1000000000000))*(cj18)))+(((x314)*(x315)))+(((x314)*(x316)))));
IkReal x317=((py)*(sj15));
IkReal x318=((IkReal(10.0000000000000))*(cj18));
IkReal x319=((cj15)*(px));
dummyeval[0]=((IkReal(-1.24610591900312))+(((x317)*(x318)))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(12.4610591900312))*(x319)))+(((IkReal(12.4610591900312))*(x317)))+(((IkReal(-1.00000000000000))*(cj18)))+(((x318)*(x319))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x320=((IkReal(10.0000000000000))*(sj18));
dummyeval[0]=((((cj15)*(px)*(x320)))+(((py)*(sj15)*(x320)))+(((IkReal(10.0000000000000))*(cj18)*(pz)))+(((IkReal(-1.00000000000000))*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x321=((IkReal(321000.000000000))*(sj18));
IkReal x322=((py)*(sj15));
IkReal x323=((cj15)*(px));
IkReal x324=((IkReal(1000.00000000000))*(pz));
IkReal x325=((IkReal(321.000000000000))*(sj18));
IkReal x326=((cj18)*(pz));
if( IKabs(((((IKabs(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x326)))+(((x321)*(x323)))+(((x321)*(x322)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x326)))+(((x321)*(x323)))+(((x321)*(x322)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((x322)*(x325)))+(((x323)*(x325)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x326))))) != 0)?((IkReal)1/(((((x322)*(x325)))+(((x323)*(x325)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x326)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((x322)*(x324)))+(((x323)*(x324)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x326)))+(((x321)*(x323)))+(((x321)*(x322)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x326)))+(((x321)*(x323)))+(((x321)*(x322)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((x322)*(x325)))+(((x323)*(x325)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x326))))) != 0)?((IkReal)1/(((((x322)*(x325)))+(((x323)*(x325)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x326)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((x322)*(x324)))+(((x323)*(x324)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x326)))+(((x321)*(x323)))+(((x321)*(x322)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x326)))+(((x321)*(x323)))+(((x321)*(x322)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((x322)*(x325)))+(((x323)*(x325)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x326))))) != 0)?((IkReal)1/(((((x322)*(x325)))+(((x323)*(x325)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x326)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((x322)*(x324)))+(((x323)*(x324)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x327=IKsin(j16);
IkReal x328=IKcos(j16);
IkReal x329=((IkReal(0.321000000000000))*(sj18));
IkReal x330=((cj15)*(px));
IkReal x331=((IkReal(0.321000000000000))*(cj18));
IkReal x332=((py)*(sj15));
IkReal x333=((pz)*(x327));
IkReal x334=((IkReal(0.800000000000000))*(x328));
IkReal x335=((IkReal(1.00000000000000))*(x328));
IkReal x336=((IkReal(1.00000000000000))*(x327));
evalcond[0]=((((x327)*(x331)))+(pz)+(((IkReal(0.400000000000000))*(x327)))+(((IkReal(-1.00000000000000))*(x328)*(x329))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x328)))+(x333)+(x331)+(((IkReal(-1.00000000000000))*(x330)*(x335)))+(((IkReal(-1.00000000000000))*(x332)*(x335))));
evalcond[2]=((IkReal(0.100000000000000))+(((x327)*(x329)))+(((IkReal(-1.00000000000000))*(x332)))+(((IkReal(-1.00000000000000))*(x330)))+(((x328)*(x331)))+(((IkReal(0.400000000000000))*(x328))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x330)*(x334)))+(((IkReal(-0.800000000000000))*(x333)))+(((IkReal(-0.0800000000000000))*(x328)))+(((x332)*(x334)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x332)))+(((IkReal(0.200000000000000))*(x330))));
evalcond[4]=((((IkReal(0.100000000000000))*(x327)))+(((IkReal(-1.00000000000000))*(pz)*(x335)))+(x329)+(((IkReal(-1.00000000000000))*(x330)*(x336)))+(((IkReal(-1.00000000000000))*(x332)*(x336))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x337=((IkReal(1000.00000000000))*(pz));
if( IKabs(((gconst49)*(((((IkReal(-1.00000000000000))*(cj15)*(px)*(x337)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(-1.00000000000000))*(py)*(sj15)*(x337)))+(((IkReal(128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(160.000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x337)))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(103.041000000000))*((cj18)*(cj18)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst49)*(((((IkReal(-1.00000000000000))*(cj15)*(px)*(x337)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(-1.00000000000000))*(py)*(sj15)*(x337)))+(((IkReal(128.400000000000))*(sj18)))))), ((gconst49)*(((IkReal(160.000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x337)))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(103.041000000000))*((cj18)*(cj18))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x338=IKsin(j16);
IkReal x339=IKcos(j16);
IkReal x340=((IkReal(0.321000000000000))*(sj18));
IkReal x341=((cj15)*(px));
IkReal x342=((IkReal(0.321000000000000))*(cj18));
IkReal x343=((py)*(sj15));
IkReal x344=((pz)*(x338));
IkReal x345=((IkReal(0.800000000000000))*(x339));
IkReal x346=((IkReal(1.00000000000000))*(x339));
IkReal x347=((IkReal(1.00000000000000))*(x338));
evalcond[0]=((((IkReal(0.400000000000000))*(x338)))+(pz)+(((x338)*(x342)))+(((IkReal(-1.00000000000000))*(x339)*(x340))));
evalcond[1]=((IkReal(0.400000000000000))+(x342)+(x344)+(((IkReal(-1.00000000000000))*(x341)*(x346)))+(((IkReal(-1.00000000000000))*(x343)*(x346)))+(((IkReal(0.100000000000000))*(x339))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x339)))+(((x338)*(x340)))+(((x339)*(x342)))+(((IkReal(-1.00000000000000))*(x341)))+(((IkReal(-1.00000000000000))*(x343))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x343)))+(((IkReal(0.200000000000000))*(x341)))+(((IkReal(-0.0800000000000000))*(x339)))+(((IkReal(-0.800000000000000))*(x344)))+(((IkReal(-1.00000000000000))*(pp)))+(((x341)*(x345)))+(((x343)*(x345))));
evalcond[4]=((x340)+(((IkReal(-1.00000000000000))*(x341)*(x347)))+(((IkReal(-1.00000000000000))*(x343)*(x347)))+(((IkReal(-1.00000000000000))*(pz)*(x346)))+(((IkReal(0.100000000000000))*(x338))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
evalcond[0]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py)))+(((IkReal(0.321000000000000))*(sj17)*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(IKcos(j18)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst45;
IkReal x348=((IkReal(321.000000000000))*(cj18));
IkReal x349=((cj15)*(px));
IkReal x350=((py)*(sj15));
gconst45=IKsign(((IkReal(-40.0000000000000))+(((IkReal(400.000000000000))*(x350)))+(((IkReal(321.000000000000))*(cj17)*(pz)*(sj18)))+(((x348)*(x349)))+(((IkReal(-32.1000000000000))*(cj18)))+(((IkReal(400.000000000000))*(x349)))+(((x348)*(x350)))));
IkReal x351=((py)*(sj15));
IkReal x352=((IkReal(10.0000000000000))*(cj18));
IkReal x353=((cj15)*(px));
dummyeval[0]=((IkReal(-1.24610591900312))+(((x352)*(x353)))+(((IkReal(10.0000000000000))*(cj17)*(pz)*(sj18)))+(((IkReal(12.4610591900312))*(x353)))+(((IkReal(12.4610591900312))*(x351)))+(((x351)*(x352)))+(((IkReal(-1.00000000000000))*(cj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((IkReal(160000.000000000))+(((IkReal(103041.000000000))*((cj17)*(cj17))*((sj18)*(sj18))))+(((IkReal(256800.000000000))*(cj18)))+(((IkReal(103041.000000000))*((cj18)*(cj18))))));
dummyeval[0]=((IkReal(1.55277996137460))+(((IkReal(2.49221183800623))*(cj18)))+((cj18)*(cj18))+((((cj17)*(cj17))*((sj18)*(sj18)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x354=((cj15)*(px));
IkReal x355=((py)*(sj15));
IkReal x356=((IkReal(321000.000000000))*(cj18));
IkReal x357=((IkReal(321000.000000000))*(cj17)*(sj18));
if( IKabs(((gconst46)*(((((IkReal(32100.0000000000))*(cj17)*(sj18)))+(((IkReal(-400000.000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x354)*(x357)))+(((IkReal(-1.00000000000000))*(x355)*(x357)))+(((IkReal(-1.00000000000000))*(pz)*(x356))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((IkReal(-40000.0000000000))+(((x355)*(x356)))+(((x354)*(x356)))+(((IkReal(400000.000000000))*(x354)))+(((IkReal(400000.000000000))*(x355)))+(((IkReal(-32100.0000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(pz)*(x357))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst46)*(((((IkReal(32100.0000000000))*(cj17)*(sj18)))+(((IkReal(-400000.000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x354)*(x357)))+(((IkReal(-1.00000000000000))*(x355)*(x357)))+(((IkReal(-1.00000000000000))*(pz)*(x356)))))), ((gconst46)*(((IkReal(-40000.0000000000))+(((x355)*(x356)))+(((x354)*(x356)))+(((IkReal(400000.000000000))*(x354)))+(((IkReal(400000.000000000))*(x355)))+(((IkReal(-32100.0000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(pz)*(x357)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x358=IKsin(j16);
IkReal x359=IKcos(j16);
IkReal x360=((IkReal(0.321000000000000))*(sj18));
IkReal x361=((cj15)*(px));
IkReal x362=((py)*(sj15));
IkReal x363=((px)*(sj15));
IkReal x364=((IkReal(1.00000000000000))*(sj17));
IkReal x365=((cj15)*(py));
IkReal x366=((IkReal(0.321000000000000))*(cj18));
IkReal x367=((pz)*(x359));
IkReal x368=((IkReal(1.00000000000000))*(x361));
IkReal x370=((sj17)*(x358));
IkReal x371=((pz)*(x358));
IkReal x372=((IkReal(0.800000000000000))*(x359));
IkReal x373=((cj17)*(x358));
evalcond[0]=((((cj17)*(x359)*(x360)))+(((x358)*(x366)))+(pz)+(((IkReal(0.400000000000000))*(x358))));
evalcond[1]=((IkReal(0.400000000000000))+(x371)+(x366)+(((IkReal(-1.00000000000000))*(x359)*(x362)))+(((IkReal(-1.00000000000000))*(x359)*(x368)))+(((IkReal(0.100000000000000))*(x359))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x362)))+(((IkReal(-1.00000000000000))*(x360)*(x373)))+(((IkReal(-1.00000000000000))*(x368)))+(((x359)*(x366)))+(((IkReal(0.400000000000000))*(x359))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x359)))+(((IkReal(-0.800000000000000))*(x371)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x361)))+(((IkReal(0.200000000000000))*(x362)))+(((x361)*(x372)))+(((x362)*(x372))));
evalcond[4]=((((cj17)*(x363)))+(((IkReal(0.100000000000000))*(x370)))+(((IkReal(-1.00000000000000))*(x358)*(x362)*(x364)))+(((IkReal(-1.00000000000000))*(x364)*(x367)))+(((IkReal(-1.00000000000000))*(x358)*(x361)*(x364)))+(((IkReal(-1.00000000000000))*(cj17)*(x365))));
evalcond[5]=((((sj17)*(x363)))+(((cj17)*(x367)))+(x360)+(((IkReal(-0.100000000000000))*(x373)))+(((IkReal(-1.00000000000000))*(x364)*(x365)))+(((x361)*(x373)))+(((x362)*(x373))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x374=((cj17)*(sj18));
IkReal x375=((IkReal(1000.00000000000))*(pz));
if( IKabs(((gconst45)*(((((IkReal(-103.041000000000))*(cj18)*(x374)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(x374)))+(((IkReal(-1.00000000000000))*(py)*(sj15)*(x375)))+(((IkReal(-1.00000000000000))*(cj15)*(px)*(x375))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((IkReal(160.000000000000))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(pz)*(x375)))+(((IkReal(103.041000000000))*((cj18)*(cj18)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst45)*(((((IkReal(-103.041000000000))*(cj18)*(x374)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(x374)))+(((IkReal(-1.00000000000000))*(py)*(sj15)*(x375)))+(((IkReal(-1.00000000000000))*(cj15)*(px)*(x375)))))), ((gconst45)*(((IkReal(160.000000000000))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(pz)*(x375)))+(((IkReal(103.041000000000))*((cj18)*(cj18))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x376=IKsin(j16);
IkReal x377=IKcos(j16);
IkReal x378=((IkReal(0.321000000000000))*(sj18));
IkReal x379=((cj15)*(px));
IkReal x380=((py)*(sj15));
IkReal x381=((px)*(sj15));
IkReal x382=((IkReal(1.00000000000000))*(sj17));
IkReal x383=((cj15)*(py));
IkReal x384=((IkReal(0.321000000000000))*(cj18));
IkReal x385=((pz)*(x377));
IkReal x386=((IkReal(1.00000000000000))*(x379));
IkReal x388=((sj17)*(x376));
IkReal x389=((pz)*(x376));
IkReal x390=((IkReal(0.800000000000000))*(x377));
IkReal x391=((cj17)*(x376));
evalcond[0]=((((x376)*(x384)))+(((IkReal(0.400000000000000))*(x376)))+(((cj17)*(x377)*(x378)))+(pz));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x377)))+(x384)+(x389)+(((IkReal(-1.00000000000000))*(x377)*(x380)))+(((IkReal(-1.00000000000000))*(x377)*(x386))));
evalcond[2]=((IkReal(0.100000000000000))+(((x377)*(x384)))+(((IkReal(-1.00000000000000))*(x378)*(x391)))+(((IkReal(0.400000000000000))*(x377)))+(((IkReal(-1.00000000000000))*(x380)))+(((IkReal(-1.00000000000000))*(x386))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x379)*(x390)))+(((IkReal(-0.800000000000000))*(x389)))+(((x380)*(x390)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x380)))+(((IkReal(-0.0800000000000000))*(x377)))+(((IkReal(0.200000000000000))*(x379))));
evalcond[4]=((((IkReal(0.100000000000000))*(x388)))+(((IkReal(-1.00000000000000))*(x376)*(x380)*(x382)))+(((IkReal(-1.00000000000000))*(x376)*(x379)*(x382)))+(((IkReal(-1.00000000000000))*(cj17)*(x383)))+(((cj17)*(x381)))+(((IkReal(-1.00000000000000))*(x382)*(x385))));
evalcond[5]=((((x379)*(x391)))+(((x380)*(x391)))+(x378)+(((IkReal(-0.100000000000000))*(x391)))+(((sj17)*(x381)))+(((cj17)*(x385)))+(((IkReal(-1.00000000000000))*(x382)*(x383))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x392=(cj15)*(cj15);
IkReal x393=(px)*(px);
IkReal x394=(py)*(py);
IkReal x395=(sj15)*(sj15);
IkReal x396=((IkReal(5.00000000000000))*(pp));
IkReal x397=((py)*(sj15));
IkReal x398=((pz)*(sj17));
IkReal x399=((IkReal(0.400000000000000))*(cj17));
IkReal x400=((px)*(sj15));
IkReal x401=((cj15)*(px)*(sj17));
IkReal x402=((IkReal(4.00000000000000))*(cj17)*(py));
IkReal x403=((IkReal(4.00000000000000))*(cj15)*(cj17)*(sj15));
if( IKabs(((gconst44)*(((((IkReal(-1.00000000000000))*(x393)*(x403)))+(((px)*(x392)*(x402)))+(((IkReal(-1.00000000000000))*(px)*(x395)*(x402)))+(((IkReal(-1.00000000000000))*(cj15)*(py)*(x399)))+(((x396)*(x398)))+(((x399)*(x400)))+(((IkReal(-1.00000000000000))*(cj15)*(px)*(x398)))+(((x394)*(x403)))+(((IkReal(-1.00000000000000))*(x397)*(x398)))+(((IkReal(0.334795000000000))*(x398))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((IkReal(-0.434795000000000))*(sj17)*(x397)))+(((sj17)*(x392)*(x393)))+(((IkReal(0.500000000000000))*(pp)*(sj17)))+(((IkReal(-0.434795000000000))*(x401)))+(((cj15)*(pz)*(x402)))+(((sj17)*(x394)*(x395)))+(((IkReal(2.00000000000000))*(x397)*(x401)))+(((IkReal(-1.00000000000000))*(sj17)*(x396)*(x397)))+(((IkReal(-1.00000000000000))*(x396)*(x401)))+(((IkReal(0.0334795000000000))*(sj17)))+(((IkReal(-4.00000000000000))*(cj17)*(pz)*(x400))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst44)*(((((IkReal(-1.00000000000000))*(x393)*(x403)))+(((px)*(x392)*(x402)))+(((IkReal(-1.00000000000000))*(px)*(x395)*(x402)))+(((IkReal(-1.00000000000000))*(cj15)*(py)*(x399)))+(((x396)*(x398)))+(((x399)*(x400)))+(((IkReal(-1.00000000000000))*(cj15)*(px)*(x398)))+(((x394)*(x403)))+(((IkReal(-1.00000000000000))*(x397)*(x398)))+(((IkReal(0.334795000000000))*(x398)))))), ((gconst44)*(((((IkReal(-0.434795000000000))*(sj17)*(x397)))+(((sj17)*(x392)*(x393)))+(((IkReal(0.500000000000000))*(pp)*(sj17)))+(((IkReal(-0.434795000000000))*(x401)))+(((cj15)*(pz)*(x402)))+(((sj17)*(x394)*(x395)))+(((IkReal(2.00000000000000))*(x397)*(x401)))+(((IkReal(-1.00000000000000))*(sj17)*(x396)*(x397)))+(((IkReal(-1.00000000000000))*(x396)*(x401)))+(((IkReal(0.0334795000000000))*(sj17)))+(((IkReal(-4.00000000000000))*(cj17)*(pz)*(x400)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x404=IKcos(j16);
IkReal x405=IKsin(j16);
IkReal x406=((IkReal(1.00000000000000))*(py));
IkReal x407=((cj15)*(px));
IkReal x408=((py)*(sj15));
IkReal x409=((sj17)*(x405));
IkReal x410=((IkReal(0.800000000000000))*(x404));
evalcond[0]=((IkReal(-0.0669590000000000))+(((x407)*(x410)))+(((IkReal(-0.800000000000000))*(pz)*(x405)))+(((IkReal(-0.0800000000000000))*(x404)))+(((x408)*(x410)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x407)))+(((IkReal(0.200000000000000))*(x408))));
evalcond[1]=((((IkReal(0.100000000000000))*(x409)))+(((IkReal(-1.00000000000000))*(sj15)*(x406)*(x409)))+(((cj17)*(px)*(sj15)))+(((IkReal(-1.00000000000000))*(pz)*(sj17)*(x404)))+(((IkReal(-1.00000000000000))*(cj15)*(cj17)*(x406)))+(((IkReal(-1.00000000000000))*(x407)*(x409))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj16;
dummyeval[1]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x411=((IkReal(1.00000000000000))*(py));
IkReal x412=((cj15)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j16)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x412))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj17)*(x412)))+(((IkReal(-1.00000000000000))*(sj15)*(sj17)*(x411)))+(((cj17)*(px)*(sj15)))+(((IkReal(0.100000000000000))*(sj17)))+(((IkReal(-1.00000000000000))*(cj15)*(cj17)*(x411))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x413=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=x413;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x413;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x414=IKcos(j18);
IkReal x415=((py)*(sj15));
IkReal x416=((cj15)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x414)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x415)))+(((IkReal(0.200000000000000))*(x416))));
evalcond[1]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x414))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-0.321000000000000))*(IKsin(j18))))+(((IkReal(-1.00000000000000))*(x415)))+(((IkReal(-1.00000000000000))*(x416))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x417=((cj15)*(py));
IkReal x418=((px)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))));
evalcond[1]=((x418)+(((IkReal(-1.00000000000000))*(x417))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((x417)+(((IkReal(-1.00000000000000))*(x418))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x419=IKcos(j18);
IkReal x420=((py)*(sj15));
IkReal x421=((cj15)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x420)))+(((IkReal(0.200000000000000))*(x421)))+(((IkReal(0.256800000000000))*(x419)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x419))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x421)))+(((IkReal(-1.00000000000000))*(x420)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x422=((py)*(sj15));
IkReal x423=((cj15)*(px));
IkReal x424=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x423)))+(((IkReal(-1.00000000000000))*(x422))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=x424;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(x422)))+(((IkReal(0.200000000000000))*(x423)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x424;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x425=IKcos(j18);
evalcond[0]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x425)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x425))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x426=((cj15)*(px));
IkReal x427=((py)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x427)))+(((IkReal(-1.00000000000000))*(x426))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(x426)))+(((IkReal(0.200000000000000))*(x427)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(-0.100000000000000))+(x427)+(x426));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x428=IKcos(j18);
evalcond[0]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py)))+(((IkReal(-0.321000000000000))*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x428)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x428))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x429=IKcos(j18);
IkReal x430=IKsin(j18);
IkReal x431=((py)*(sj15));
IkReal x432=((px)*(sj15));
IkReal x433=((cj15)*(px));
IkReal x434=((IkReal(0.321000000000000))*(x430));
IkReal x435=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((((IkReal(-1.00000000000000))*(x435)))+(x432)+(((sj17)*(x434))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x429)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x431)))+(((IkReal(0.200000000000000))*(x433))));
evalcond[2]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x429))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x431)))+(((IkReal(-1.00000000000000))*(x433)))+(((IkReal(-1.00000000000000))*(cj17)*(x434))));
evalcond[4]=((((IkReal(-0.100000000000000))*(cj17)))+(((cj17)*(x431)))+(((cj17)*(x433)))+(((IkReal(-1.00000000000000))*(sj17)*(x435)))+(x434)+(((sj17)*(x432))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(cj15)*(px)))+(((IkReal(-1000.00000000000))*(py)*(sj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(cj15)*(px)))+(((IkReal(-1000.00000000000))*(py)*(sj15)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(cj15)*(px)))+(((IkReal(-1000.00000000000))*(py)*(sj15)))))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x436=IKcos(j18);
IkReal x437=IKsin(j18);
IkReal x438=((py)*(sj15));
IkReal x439=((px)*(sj15));
IkReal x440=((cj15)*(px));
IkReal x441=((IkReal(0.321000000000000))*(x437));
IkReal x442=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((((IkReal(-1.00000000000000))*(x442)))+(x439)+(((sj17)*(x441))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x436)))+(((IkReal(0.200000000000000))*(x440)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x438))));
evalcond[2]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x436))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x438)))+(((IkReal(-1.00000000000000))*(x440)))+(((IkReal(-1.00000000000000))*(cj17)*(x441))));
evalcond[4]=((((IkReal(-0.100000000000000))*(cj17)))+(((cj17)*(x438)))+(((cj17)*(x440)))+(((IkReal(-1.00000000000000))*(sj17)*(x442)))+(x441)+(((sj17)*(x439))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x443=IKcos(j18);
IkReal x444=IKsin(j18);
IkReal x445=((py)*(sj15));
IkReal x446=((px)*(sj15));
IkReal x447=((cj15)*(px));
IkReal x448=((IkReal(0.321000000000000))*(x444));
IkReal x449=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((((IkReal(-1.00000000000000))*(x449)))+(x446)+(((sj17)*(x448))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x443)))+(((IkReal(0.200000000000000))*(x447)))+(((IkReal(0.200000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x443))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(cj17)*(x448))));
evalcond[4]=((((IkReal(-0.100000000000000))*(cj17)))+(((cj17)*(x445)))+(((cj17)*(x447)))+(((IkReal(-1.00000000000000))*(sj17)*(x449)))+(x448)+(((sj17)*(x446))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x450=((cj15)*(px));
IkReal x451=((py)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j16)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x451)))+(((IkReal(0.200000000000000))*(x450)))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj15)*(cj17)*(py)))+(((IkReal(-0.100000000000000))*(sj17)))+(((sj17)*(x450)))+(((sj17)*(x451)))+(((cj17)*(px)*(sj15))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x452=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=x452;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x452;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x453=IKcos(j18);
IkReal x454=((py)*(sj15));
IkReal x455=((cj15)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x455)))+(((IkReal(0.200000000000000))*(x454)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x453))));
evalcond[1]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x453))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x454)))+(((IkReal(-1.00000000000000))*(x455)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x456=((cj15)*(py));
IkReal x457=((px)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x456)))+(x457));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x457)))+(x456));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x458=IKcos(j18);
IkReal x459=((py)*(sj15));
IkReal x460=((cj15)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x460)))+(((IkReal(0.200000000000000))*(x459)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x458))));
evalcond[1]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x458))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x459)))+(((IkReal(-1.00000000000000))*(x460)))+(((IkReal(-0.321000000000000))*(IKsin(j18)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x461=((cj15)*(px));
IkReal x462=((py)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x462)))+(((IkReal(-1.00000000000000))*(x461))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x461)))+(((IkReal(0.200000000000000))*(x462)))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(-0.100000000000000))+(x462)+(x461));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x463=IKcos(j18);
evalcond[0]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x463))));
evalcond[2]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x463))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x464=((py)*(sj15));
IkReal x465=((cj15)*(px));
IkReal x466=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x464)))+(((IkReal(-1.00000000000000))*(x465))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=x466;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x465)))+(((IkReal(0.200000000000000))*(x464)))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x466;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x467=IKcos(j18);
evalcond[0]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py)))+(((IkReal(-0.321000000000000))*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x467))));
evalcond[2]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x467))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x468=IKcos(j18);
IkReal x469=IKsin(j18);
IkReal x470=((px)*(sj15));
IkReal x471=((IkReal(1.00000000000000))*(cj15));
IkReal x472=((IkReal(0.321000000000000))*(x469));
IkReal x473=((IkReal(1.00000000000000))*(py)*(sj15));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x471)))+(((sj17)*(x472)))+(x470));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x468))));
evalcond[2]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x468))));
evalcond[3]=((IkReal(0.100000000000000))+(((cj17)*(x472)))+(((IkReal(-1.00000000000000))*(x473)))+(((IkReal(-1.00000000000000))*(px)*(x471))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj17)*(px)*(x471)))+(((sj17)*(x470)))+(x472)+(((IkReal(-1.00000000000000))*(py)*(sj17)*(x471)))+(((IkReal(-1.00000000000000))*(cj17)*(x473)))+(((IkReal(0.100000000000000))*(cj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(py)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(py)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(px)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(py)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(px)))))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x474=IKcos(j18);
IkReal x475=IKsin(j18);
IkReal x476=((px)*(sj15));
IkReal x477=((IkReal(1.00000000000000))*(cj15));
IkReal x478=((IkReal(0.321000000000000))*(x475));
IkReal x479=((IkReal(1.00000000000000))*(py)*(sj15));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x477)))+(((sj17)*(x478)))+(x476));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x474))));
evalcond[2]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x474)))+(pz));
evalcond[3]=((IkReal(0.100000000000000))+(((cj17)*(x478)))+(((IkReal(-1.00000000000000))*(x479)))+(((IkReal(-1.00000000000000))*(px)*(x477))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj17)*(px)*(x477)))+(((sj17)*(x476)))+(x478)+(((IkReal(-1.00000000000000))*(py)*(sj17)*(x477)))+(((IkReal(-1.00000000000000))*(cj17)*(x479)))+(((IkReal(0.100000000000000))*(cj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x480=IKcos(j18);
IkReal x481=IKsin(j18);
IkReal x482=((px)*(sj15));
IkReal x483=((IkReal(1.00000000000000))*(cj15));
IkReal x484=((IkReal(0.321000000000000))*(x481));
IkReal x485=((IkReal(1.00000000000000))*(py)*(sj15));
evalcond[0]=((x482)+(((sj17)*(x484)))+(((IkReal(-1.00000000000000))*(py)*(x483))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x480))));
evalcond[2]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x480))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x485)))+(((IkReal(-1.00000000000000))*(px)*(x483)))+(((cj17)*(x484))));
evalcond[4]=((x484)+(((IkReal(-1.00000000000000))*(cj17)*(x485)))+(((sj17)*(x482)))+(((IkReal(-1.00000000000000))*(cj17)*(px)*(x483)))+(((IkReal(-1.00000000000000))*(py)*(sj17)*(x483)))+(((IkReal(0.100000000000000))*(cj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x486=((IkReal(1.00000000000000))*(sj16));
IkReal x487=((cj15)*(px));
IkReal x488=((py)*(sj15));
IkReal x489=((IkReal(0.800000000000000))*(cj16));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((x488)*(x489)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16)))+(((IkReal(0.200000000000000))*(x488)))+(((IkReal(0.200000000000000))*(x487)))+(((x487)*(x489))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x486)*(x488)))+(((IkReal(-1.00000000000000))*(x486)*(x487)))+(((IkReal(-1.00000000000000))*(cj16)*(pz)))+(((IkReal(0.100000000000000))*(sj16))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x490=IKcos(j18);
IkReal x491=((py)*(sj15));
IkReal x492=((IkReal(1.00000000000000))*(cj16));
IkReal x493=((IkReal(1.00000000000000))*(cj15));
IkReal x494=((cj15)*(px));
IkReal x495=((IkReal(0.321000000000000))*(x490));
evalcond[0]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(py)*(x493)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x491)))+(((IkReal(0.200000000000000))*(x494)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x490))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x495))));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x491)*(x492)))+(((pz)*(sj16)))+(x495)+(((IkReal(0.100000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x492)*(x494))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(px)*(x493)))+(((IkReal(-1.00000000000000))*(x491)))+(((IkReal(0.400000000000000))*(cj16)))+(((cj16)*(x495))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x496=((cj15)*(px));
IkReal x497=((IkReal(0.800000000000000))*(cj16));
IkReal x498=((py)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x498)))+(((IkReal(0.200000000000000))*(x496)))+(((x496)*(x497)))+(((x497)*(x498)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16))));
evalcond[2]=((((IkReal(-0.100000000000000))*(sj16)))+(((sj16)*(x498)))+(((sj16)*(x496)))+(((cj16)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x499=IKcos(j18);
IkReal x500=((py)*(sj15));
IkReal x501=((IkReal(1.00000000000000))*(cj16));
IkReal x502=((IkReal(1.00000000000000))*(cj15));
IkReal x503=((cj15)*(px));
IkReal x504=((IkReal(0.321000000000000))*(x499));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x502)))+(((px)*(sj15)))+(((IkReal(-0.321000000000000))*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x503)))+(((IkReal(0.200000000000000))*(x500)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x499))));
evalcond[2]=((((sj16)*(x504)))+(((IkReal(0.400000000000000))*(sj16)))+(pz));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x501)*(x503)))+(((pz)*(sj16)))+(x504)+(((IkReal(-1.00000000000000))*(x500)*(x501)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((cj16)*(x504)))+(((IkReal(0.400000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x500)))+(((IkReal(-1.00000000000000))*(px)*(x502))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x505=((py)*(sj15));
IkReal x506=((IkReal(0.800000000000000))*(cj16));
IkReal x507=((cj15)*(px));
IkReal x508=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=x508;
evalcond[2]=((IkReal(-0.0669590000000000))+(((x506)*(x507)))+(((x505)*(x506)))+(((IkReal(0.200000000000000))*(x505)))+(((IkReal(0.200000000000000))*(x507)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16))));
evalcond[3]=x508;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x509=((IkReal(3.11526479750779))*(sj16));
IkReal x510=((py)*(sj15));
IkReal x511=((cj15)*(px));
if( IKabs(((((IkReal(0.311526479750779))*(sj16)))+(((IkReal(-3.11526479750779))*(cj16)*(pz)))+(((IkReal(-1.00000000000000))*(x509)*(x511)))+(((IkReal(-1.00000000000000))*(x509)*(x510))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x511)))+(((IkReal(-0.778816199376947))*(x510)))+(((IkReal(3.89408099688474))*(pp))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(0.311526479750779))*(sj16)))+(((IkReal(-3.11526479750779))*(cj16)*(pz)))+(((IkReal(-1.00000000000000))*(x509)*(x511)))+(((IkReal(-1.00000000000000))*(x509)*(x510)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x511)))+(((IkReal(-0.778816199376947))*(x510)))+(((IkReal(3.89408099688474))*(pp)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(0.311526479750779))*(sj16)))+(((IkReal(-3.11526479750779))*(cj16)*(pz)))+(((IkReal(-1.00000000000000))*(x509)*(x511)))+(((IkReal(-1.00000000000000))*(x509)*(x510)))), ((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x511)))+(((IkReal(-0.778816199376947))*(x510)))+(((IkReal(3.89408099688474))*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x512=IKcos(j18);
IkReal x513=IKsin(j18);
IkReal x514=((py)*(sj15));
IkReal x515=((cj15)*(px));
IkReal x516=((IkReal(1.00000000000000))*(cj16));
IkReal x517=((IkReal(0.321000000000000))*(x512));
IkReal x518=((IkReal(0.321000000000000))*(x513));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x514)))+(((IkReal(0.200000000000000))*(x515)))+(((IkReal(0.256800000000000))*(x512)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((((sj16)*(x517)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((cj16)*(x518))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x514)*(x516)))+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x515)*(x516)))+(x517)+(((IkReal(0.100000000000000))*(cj16))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(sj16)*(x518)))+(((IkReal(-1.00000000000000))*(x514)))+(((IkReal(-1.00000000000000))*(x515)))+(((IkReal(0.400000000000000))*(cj16)))+(((cj16)*(x517))));
evalcond[4]=((((IkReal(-0.100000000000000))*(sj16)))+(((sj16)*(x514)))+(((sj16)*(x515)))+(x518)+(((cj16)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x519=((py)*(sj15));
IkReal x520=((cj15)*(py));
IkReal x521=((IkReal(0.800000000000000))*(cj16));
IkReal x522=((cj15)*(px));
IkReal x523=((px)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x520)))+(x523));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x519)))+(((x519)*(x521)))+(((IkReal(0.200000000000000))*(x522)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((x521)*(x522)))+(((IkReal(-0.0800000000000000))*(cj16))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x523)))+(x520));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(((((IkReal(321.000000000000))*((cj16)*(cj16))))+(((IkReal(321.000000000000))*((sj16)*(sj16))))));
dummyeval[0]=(((sj16)*(sj16))+((cj16)*(cj16)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x524=((cj16)*(sj16));
IkReal x525=((py)*(sj15));
IkReal x526=((IkReal(3.11526479750779))*(cj16));
IkReal x527=((IkReal(1000.00000000000))*(pz));
IkReal x528=((cj15)*(px));
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(x524)))+(x527)+(((IkReal(1000.00000000000))*(x524)*(x528)))+(((IkReal(1000.00000000000))*(x524)*(x525)))+(((IkReal(-1.00000000000000))*(x527)*((sj16)*(sj16)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((x526)*(x528)))+(((x525)*(x526)))+(((IkReal(-0.311526479750779))*(cj16))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(x524)))+(x527)+(((IkReal(1000.00000000000))*(x524)*(x528)))+(((IkReal(1000.00000000000))*(x524)*(x525)))+(((IkReal(-1.00000000000000))*(x527)*((sj16)*(sj16))))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((x526)*(x528)))+(((x525)*(x526)))+(((IkReal(-0.311526479750779))*(cj16)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(x524)))+(x527)+(((IkReal(1000.00000000000))*(x524)*(x528)))+(((IkReal(1000.00000000000))*(x524)*(x525)))+(((IkReal(-1.00000000000000))*(x527)*((sj16)*(sj16))))))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((x526)*(x528)))+(((x525)*(x526)))+(((IkReal(-0.311526479750779))*(cj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x529=IKcos(j18);
IkReal x530=IKsin(j18);
IkReal x531=((IkReal(1.00000000000000))*(cj16));
IkReal x532=((py)*(sj15));
IkReal x533=((cj15)*(px));
IkReal x534=((IkReal(0.321000000000000))*(x529));
IkReal x535=((IkReal(1.00000000000000))*(x533));
IkReal x536=((IkReal(0.321000000000000))*(x530));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x533)))+(((IkReal(0.200000000000000))*(x532)))+(((IkReal(0.256800000000000))*(x529)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj16)*(x536)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x534))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x531)*(x532)))+(((IkReal(-1.00000000000000))*(x531)*(x533)))+(((pz)*(sj16)))+(x534)+(((IkReal(0.100000000000000))*(cj16))));
evalcond[3]=((IkReal(0.100000000000000))+(((cj16)*(x534)))+(((IkReal(-1.00000000000000))*(x532)))+(((IkReal(-1.00000000000000))*(x535)))+(((IkReal(0.400000000000000))*(cj16)))+(((sj16)*(x536))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj16)*(x535)))+(x536)+(((IkReal(-1.00000000000000))*(pz)*(x531)))+(((IkReal(0.100000000000000))*(sj16)))+(((IkReal(-1.00000000000000))*(sj16)*(x532))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x537=((IkReal(250.000000000000))*(sj16));
IkReal x538=((py)*(sj15));
IkReal x539=((cj15)*(px));
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((((IkReal(83.6987500000000))*(sj16)))+(((IkReal(-1.00000000000000))*(x537)*(x538)))+(((IkReal(-1.00000000000000))*(x537)*(x539)))+(((IkReal(1250.00000000000))*(pp)*(sj16)))+(((IkReal(1000.00000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x539)))+(((IkReal(-0.778816199376947))*(x538))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((((IkReal(83.6987500000000))*(sj16)))+(((IkReal(-1.00000000000000))*(x537)*(x538)))+(((IkReal(-1.00000000000000))*(x537)*(x539)))+(((IkReal(1250.00000000000))*(pp)*(sj16)))+(((IkReal(1000.00000000000))*(pz)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x539)))+(((IkReal(-0.778816199376947))*(x538)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((((IkReal(83.6987500000000))*(sj16)))+(((IkReal(-1.00000000000000))*(x537)*(x538)))+(((IkReal(-1.00000000000000))*(x537)*(x539)))+(((IkReal(1250.00000000000))*(pp)*(sj16)))+(((IkReal(1000.00000000000))*(pz)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x539)))+(((IkReal(-0.778816199376947))*(x538)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x540=IKcos(j18);
IkReal x541=IKsin(j18);
IkReal x542=((IkReal(1.00000000000000))*(cj16));
IkReal x543=((py)*(sj15));
IkReal x544=((cj15)*(px));
IkReal x545=((IkReal(0.321000000000000))*(x540));
IkReal x546=((IkReal(1.00000000000000))*(x544));
IkReal x547=((IkReal(0.321000000000000))*(x541));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x544)))+(((IkReal(0.200000000000000))*(x543)))+(((IkReal(0.256800000000000))*(x540)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((((IkReal(0.400000000000000))*(sj16)))+(((sj16)*(x545)))+(pz)+(((IkReal(-1.00000000000000))*(cj16)*(x547))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x542)*(x544)))+(((IkReal(-1.00000000000000))*(x542)*(x543)))+(((pz)*(sj16)))+(x545)+(((IkReal(0.100000000000000))*(cj16))));
evalcond[3]=((IkReal(0.100000000000000))+(((cj16)*(x545)))+(((IkReal(-1.00000000000000))*(x543)))+(((IkReal(-1.00000000000000))*(x546)))+(((sj16)*(x547)))+(((IkReal(0.400000000000000))*(cj16))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj16)*(x546)))+(((IkReal(-1.00000000000000))*(pz)*(x542)))+(x547)+(((IkReal(-1.00000000000000))*(sj16)*(x543)))+(((IkReal(0.100000000000000))*(sj16))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x548=((IkReal(1000.00000000000))*(cj16));
IkReal x549=((IkReal(1000.00000000000))*(sj16));
IkReal x550=((py)*(sj15));
IkReal x551=((cj15)*(px));
if( IKabs(((gconst47)*(((((x549)*(x550)))+(((x549)*(x551)))+(((IkReal(-100.000000000000))*(sj16)))+(((pz)*(x548))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((((x548)*(x550)))+(((x548)*(x551)))+(((IkReal(-100.000000000000))*(cj16)))+(((IkReal(-400.000000000000))*((sj16)*(sj16))))+(((IkReal(-400.000000000000))*((cj16)*(cj16))))+(((IkReal(-1.00000000000000))*(pz)*(x549))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j18array[0]=IKatan2(((gconst47)*(((((x549)*(x550)))+(((x549)*(x551)))+(((IkReal(-100.000000000000))*(sj16)))+(((pz)*(x548)))))), ((gconst47)*(((((x548)*(x550)))+(((x548)*(x551)))+(((IkReal(-100.000000000000))*(cj16)))+(((IkReal(-400.000000000000))*((sj16)*(sj16))))+(((IkReal(-400.000000000000))*((cj16)*(cj16))))+(((IkReal(-1.00000000000000))*(pz)*(x549)))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x552=IKcos(j18);
IkReal x553=IKsin(j18);
IkReal x554=((IkReal(1.00000000000000))*(cj16));
IkReal x555=((py)*(sj15));
IkReal x556=((cj15)*(px));
IkReal x557=((IkReal(0.321000000000000))*(x552));
IkReal x558=((IkReal(1.00000000000000))*(x556));
IkReal x559=((IkReal(0.321000000000000))*(x553));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x555)))+(((IkReal(0.200000000000000))*(x556)))+(((IkReal(0.256800000000000))*(x552)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x557)))+(((IkReal(-1.00000000000000))*(cj16)*(x559))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x554)*(x555)))+(((IkReal(-1.00000000000000))*(x554)*(x556)))+(((pz)*(sj16)))+(x557)+(((IkReal(0.100000000000000))*(cj16))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x555)))+(((IkReal(-1.00000000000000))*(x558)))+(((IkReal(0.400000000000000))*(cj16)))+(((sj16)*(x559)))+(((cj16)*(x557))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj16)*(x558)))+(x559)+(((IkReal(-1.00000000000000))*(sj16)*(x555)))+(((IkReal(0.100000000000000))*(sj16)))+(((IkReal(-1.00000000000000))*(pz)*(x554))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x560=((IkReal(250.000000000000))*(sj16));
IkReal x561=((py)*(sj15));
IkReal x562=((cj15)*(px));
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(pz)))+(((x560)*(x561)))+(((x560)*(x562)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((IkReal(-83.6987500000000))*(sj16))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x562)))+(((IkReal(-0.778816199376947))*(x561))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(pz)))+(((x560)*(x561)))+(((x560)*(x562)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((IkReal(-83.6987500000000))*(sj16)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x562)))+(((IkReal(-0.778816199376947))*(x561)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(pz)))+(((x560)*(x561)))+(((x560)*(x562)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((IkReal(-83.6987500000000))*(sj16)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x562)))+(((IkReal(-0.778816199376947))*(x561)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x563=IKcos(j18);
IkReal x564=IKsin(j18);
IkReal x565=((cj17)*(sj16));
IkReal x566=((cj16)*(cj17));
IkReal x567=((cj15)*(px));
IkReal x568=((IkReal(1.00000000000000))*(cj16));
IkReal x569=((py)*(sj15));
IkReal x570=((px)*(sj15));
IkReal x571=((IkReal(0.321000000000000))*(x564));
IkReal x572=((IkReal(0.321000000000000))*(x563));
IkReal x573=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((((sj17)*(x571)))+(((IkReal(-1.00000000000000))*(x573)))+(x570));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x567)))+(((IkReal(0.200000000000000))*(x569)))+(((IkReal(0.256800000000000))*(x563))));
evalcond[2]=((((sj16)*(x572)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((x566)*(x571))));
evalcond[3]=((IkReal(0.400000000000000))+(((pz)*(sj16)))+(x572)+(((IkReal(-1.00000000000000))*(x568)*(x569)))+(((IkReal(-1.00000000000000))*(x567)*(x568)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x565)*(x571)))+(((IkReal(0.400000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x567)))+(((IkReal(-1.00000000000000))*(x569)))+(((cj16)*(x572))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj17)*(x573)))+(((x565)*(x567)))+(((x565)*(x569)))+(((sj17)*(x570)))+(((IkReal(-0.100000000000000))*(x565)))+(x571)+(((pz)*(x566))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x574=((IkReal(3.11526479750779))*(cj16));
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((cj15)*(px)*(x574)))+(((py)*(sj15)*(x574)))+(((IkReal(-0.311526479750779))*(cj16))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((cj15)*(px)*(x574)))+(((py)*(sj15)*(x574)))+(((IkReal(-0.311526479750779))*(cj16)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((cj15)*(px)*(x574)))+(((py)*(sj15)*(x574)))+(((IkReal(-0.311526479750779))*(cj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x575=IKcos(j18);
IkReal x576=IKsin(j18);
IkReal x577=((cj17)*(sj16));
IkReal x578=((cj16)*(cj17));
IkReal x579=((cj15)*(px));
IkReal x580=((IkReal(1.00000000000000))*(cj16));
IkReal x581=((py)*(sj15));
IkReal x582=((px)*(sj15));
IkReal x583=((IkReal(0.321000000000000))*(x576));
IkReal x584=((IkReal(0.321000000000000))*(x575));
IkReal x585=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((((sj17)*(x583)))+(x582)+(((IkReal(-1.00000000000000))*(x585))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x579)))+(((IkReal(0.256800000000000))*(x575)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x581))));
evalcond[2]=((((x578)*(x583)))+(((sj16)*(x584)))+(((IkReal(0.400000000000000))*(sj16)))+(pz));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x580)*(x581)))+(((IkReal(-1.00000000000000))*(x579)*(x580)))+(((pz)*(sj16)))+(x584)+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x581)))+(((IkReal(-1.00000000000000))*(x577)*(x583)))+(((IkReal(-1.00000000000000))*(x579)))+(((IkReal(0.400000000000000))*(cj16)))+(((cj16)*(x584))));
evalcond[5]=((((x577)*(x581)))+(((IkReal(-1.00000000000000))*(sj17)*(x585)))+(((pz)*(x578)))+(((sj17)*(x582)))+(((x577)*(x579)))+(x583)+(((IkReal(-0.100000000000000))*(x577))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x586=IKcos(j18);
IkReal x587=IKsin(j18);
IkReal x588=((cj17)*(sj16));
IkReal x589=((cj16)*(cj17));
IkReal x590=((cj15)*(px));
IkReal x591=((IkReal(1.00000000000000))*(cj16));
IkReal x592=((py)*(sj15));
IkReal x593=((px)*(sj15));
IkReal x594=((IkReal(0.321000000000000))*(x587));
IkReal x595=((IkReal(0.321000000000000))*(x586));
IkReal x596=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((((IkReal(-1.00000000000000))*(x596)))+(x593)+(((sj17)*(x594))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x586)))+(((IkReal(0.200000000000000))*(x590)))+(((IkReal(0.200000000000000))*(x592)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x595)))+(((x589)*(x594))));
evalcond[3]=((IkReal(0.400000000000000))+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x590)*(x591)))+(x595)+(((IkReal(-1.00000000000000))*(x591)*(x592)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((cj16)*(x595)))+(((IkReal(-1.00000000000000))*(x588)*(x594)))+(((IkReal(-1.00000000000000))*(x592)))+(((IkReal(-1.00000000000000))*(x590)))+(((IkReal(0.400000000000000))*(cj16))));
evalcond[5]=((((IkReal(-0.100000000000000))*(x588)))+(((IkReal(-1.00000000000000))*(sj17)*(x596)))+(x594)+(((x588)*(x590)))+(((x588)*(x592)))+(((sj17)*(x593)))+(((pz)*(x589))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x154=((IkReal(1.00000000000000))*(cj17));
IkReal x155=((cj18)*(sj16));
IkReal x156=((cj16)*(sj17));
IkReal x157=((sj16)*(sj18));
IkReal x158=((sj16)*(sj17));
IkReal x159=((cj16)*(cj18));
IkReal x160=((sj17)*(sj18));
IkReal x161=((cj16)*(sj18));
IkReal x162=((cj18)*(sj15)*(sj17));
IkReal x163=((((IkReal(-1.00000000000000))*(x154)*(x159)))+(x157));
IkReal x164=((((sj15)*(x158)))+(((cj15)*(cj17))));
IkReal x165=((((cj15)*(x158)))+(((IkReal(-1.00000000000000))*(sj15)*(x154))));
IkReal x166=((((IkReal(-1.00000000000000))*(x154)*(x157)))+(x159));
IkReal x167=((cj15)*(x166));
IkReal x168=((((IkReal(-1.00000000000000))*(x154)*(x155)))+(((IkReal(-1.00000000000000))*(x161))));
IkReal x169=((((IkReal(-1.00000000000000))*(x154)*(x161)))+(((IkReal(-1.00000000000000))*(x155))));
IkReal x170=((cj15)*(x168));
IkReal x171=((((sj15)*(x166)))+(((cj15)*(x160))));
IkReal x172=((((IkReal(-1.00000000000000))*(sj15)*(x160)))+(x167));
IkReal x173=((((cj15)*(cj18)*(sj17)))+(((sj15)*(x168))));
IkReal x174=((x170)+(((IkReal(-1.00000000000000))*(x162))));
new_r00=((((r00)*(x174)))+(((r20)*(x163)))+(((r10)*(x173))));
new_r01=((((r01)*(x174)))+(((r21)*(x163)))+(((r11)*(x173))));
new_r02=((((r22)*(x163)))+(((r02)*(((x170)+(((IkReal(-1.00000000000000))*(x162)))))))+(((r12)*(x173))));
new_r10=((((r00)*(x165)))+(((r20)*(x156)))+(((r10)*(x164))));
new_r11=((((r01)*(x165)))+(((r21)*(x156)))+(((r11)*(x164))));
new_r12=((((r12)*(x164)))+(((r22)*(x156)))+(((r02)*(x165))));
new_r20=((((r20)*(x169)))+(((r10)*(x171)))+(((r00)*(((((IkReal(-1.00000000000000))*(sj15)*(x160)))+(x167))))));
new_r21=((((r01)*(x172)))+(((r21)*(x169)))+(((r11)*(x171))));
new_r22=((((r22)*(x169)))+(((r12)*(x171)))+(((r02)*(x172))));
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
cj20array[0]=new_r22;
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign(((((new_r10)*(new_r12)*(sj20)))+(((new_r00)*(new_r02)*(sj20)))));
dummyeval[0]=((((new_r10)*(new_r12)*(sj20)))+(((new_r00)*(new_r02)*(sj20))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x175=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x175;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x175;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x176=IKatan2(new_r02, new_r12);
j19array[0]=((IkReal(-1.00000000000000))*(x176));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x176))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j19))))+(((new_r12)*(IKcos(j19)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj19)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj19)))+(((cj19)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj19)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj19)))))+IKsqr(((((new_r10)*(sj19)))+(((cj19)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj19)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj19)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x177=IKsin(j21);
IkReal x178=((IkReal(1.00000000000000))*(sj19));
IkReal x179=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x177)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x178))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x179)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x178))));
evalcond[2]=((x177)+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x179)))+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x180=IKatan2(new_r02, new_r12);
j19array[0]=((IkReal(-1.00000000000000))*(x180));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x180))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j19))))+(((new_r12)*(IKcos(j19)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((cj19)*(new_r01)))+(((new_r11)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj19)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x181=IKcos(j21);
IkReal x182=((IkReal(1.00000000000000))*(sj19));
IkReal x183=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x183)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x182))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x181)))+(((IkReal(-1.00000000000000))*(new_r01)*(x182)))+(((cj19)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x183)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((x181)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x184=((IkReal(-1.00000000000000))*(cj20)*(gconst51)*(new_r20));
if( IKabs(((new_r12)*(x184))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x184))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((new_r12)*(x184)), ((new_r02)*(x184)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[6];
IkReal x185=IKcos(j19);
IkReal x186=IKsin(j19);
IkReal x187=((IkReal(1.00000000000000))*(sj20));
IkReal x188=((new_r02)*(x185));
IkReal x189=((sj20)*(x185));
IkReal x190=((new_r12)*(x186));
IkReal x191=((sj20)*(x186));
evalcond[0]=((((new_r12)*(x185)))+(((IkReal(-1.00000000000000))*(new_r02)*(x186))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x187)))+(x190)+(x188));
evalcond[2]=((((new_r10)*(x191)))+(((new_r00)*(x189)))+(((cj20)*(new_r20))));
evalcond[3]=((((new_r11)*(x191)))+(((new_r01)*(x189)))+(((cj20)*(new_r21))));
evalcond[4]=((IkReal(-1.00000000000000))+(((sj20)*(x190)))+(((sj20)*(x188)))+(((cj20)*(new_r22))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r22)*(x187)))+(((cj20)*(x188)))+(((cj20)*(x190))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x192=((IkReal(-1.00000000000000))+(new_r22));
IkReal x193=((((IkReal(-1.00000000000000))*(new_r02)*(sj19)))+(((cj19)*(new_r12))));
IkReal x194=((((cj19)*(new_r02)))+(((new_r12)*(sj19))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x192;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x193;
evalcond[5]=x193;
evalcond[6]=x194;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x192;
evalcond[10]=x194;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj19)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj19)))+(((cj19)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj19)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj19)))))+IKsqr(((((new_r10)*(sj19)))+(((cj19)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj19)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj19)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x195=IKsin(j21);
IkReal x196=((IkReal(1.00000000000000))*(sj19));
IkReal x197=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x195)))+(((IkReal(-1.00000000000000))*(new_r00)*(x196)))+(((cj19)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(new_r01)*(x196)))+(((cj19)*(new_r11))));
evalcond[2]=((x195)+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x197)))+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x198=((new_r12)*(sj19));
IkReal x199=((IkReal(1.00000000000000))*(new_r02));
IkReal x200=((((IkReal(-1.00000000000000))*(sj19)*(x199)))+(((cj19)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x200;
evalcond[5]=x200;
evalcond[6]=((x198)+(((cj19)*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj19)*(x199)))+(((IkReal(-1.00000000000000))*(x198))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((cj19)*(new_r01)))+(((new_r11)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj19)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x201=IKcos(j21);
IkReal x202=((IkReal(1.00000000000000))*(sj19));
IkReal x203=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x202)))+(((IkReal(-1.00000000000000))*(x203)))+(((cj19)*(new_r10))));
evalcond[1]=((((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(x201)))+(((IkReal(-1.00000000000000))*(new_r01)*(x202))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x203)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((x201)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj19)))+(((cj19)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj19)))+(((cj19)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj19)))+(((cj19)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x204=IKsin(j21);
IkReal x205=IKcos(j21);
IkReal x206=((IkReal(1.00000000000000))*(sj20));
IkReal x207=((IkReal(1.00000000000000))*(sj19));
IkReal x208=((cj19)*(new_r00));
IkReal x209=((new_r10)*(sj19));
IkReal x210=((new_r11)*(sj19));
IkReal x211=((cj19)*(new_r01));
IkReal x212=((IkReal(1.00000000000000))*(x205));
evalcond[0]=((((sj20)*(x205)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x204)*(x206)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x207)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(x204))));
evalcond[3]=((((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(x212)))+(((IkReal(-1.00000000000000))*(new_r01)*(x207))));
evalcond[4]=((x210)+(x211)+(((cj20)*(x204))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x212)))+(x209)+(x208));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x206)))+(((cj20)*(x211)))+(((cj20)*(x210)))+(x204));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x206)))+(((cj20)*(x208)))+(((cj20)*(x209)))+(((IkReal(-1.00000000000000))*(x212))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((new_r21)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj19)))+(((cj19)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj19)))+(((cj19)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((new_r21)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj19)))+(((cj19)*(new_r11)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x213=IKsin(j21);
IkReal x214=IKcos(j21);
IkReal x215=((IkReal(1.00000000000000))*(sj20));
IkReal x216=((IkReal(1.00000000000000))*(sj19));
IkReal x217=((cj19)*(new_r00));
IkReal x218=((new_r10)*(sj19));
IkReal x219=((new_r11)*(sj19));
IkReal x220=((cj19)*(new_r01));
IkReal x221=((IkReal(1.00000000000000))*(x214));
evalcond[0]=((((sj20)*(x214)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x213)*(x215)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x213)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x216))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x216)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[4]=((((cj20)*(x213)))+(x219)+(x220));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x221)))+(x217)+(x218));
evalcond[6]=((((cj20)*(x219)))+(x213)+(((cj20)*(x220)))+(((IkReal(-1.00000000000000))*(new_r21)*(x215))));
evalcond[7]=((((cj20)*(x218)))+(((cj20)*(x217)))+(((IkReal(-1.00000000000000))*(new_r20)*(x215)))+(((IkReal(-1.00000000000000))*(x221))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((gconst53)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst53)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst53)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst53)*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x222=IKsin(j21);
IkReal x223=IKcos(j21);
IkReal x224=((IkReal(1.00000000000000))*(sj20));
IkReal x225=((IkReal(1.00000000000000))*(sj19));
IkReal x226=((cj19)*(new_r00));
IkReal x227=((new_r10)*(sj19));
IkReal x228=((new_r11)*(sj19));
IkReal x229=((cj19)*(new_r01));
IkReal x230=((IkReal(1.00000000000000))*(x223));
evalcond[0]=((((sj20)*(x223)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x222)*(x224)))+(new_r21));
evalcond[2]=((((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x225)))+(((IkReal(-1.00000000000000))*(x222))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x225)))+(((IkReal(-1.00000000000000))*(x230)))+(((cj19)*(new_r11))));
evalcond[4]=((x229)+(x228)+(((cj20)*(x222))));
evalcond[5]=((x227)+(x226)+(((IkReal(-1.00000000000000))*(cj20)*(x230))));
evalcond[6]=((x222)+(((cj20)*(x228)))+(((cj20)*(x229)))+(((IkReal(-1.00000000000000))*(new_r21)*(x224))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x230)))+(((cj20)*(x226)))+(((cj20)*(x227)))+(((IkReal(-1.00000000000000))*(new_r20)*(x224))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x231=((gconst50)*(sj20));
if( IKabs(((new_r12)*(x231))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x231))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((new_r12)*(x231)), ((new_r02)*(x231)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[6];
IkReal x232=IKcos(j19);
IkReal x233=IKsin(j19);
IkReal x234=((IkReal(1.00000000000000))*(sj20));
IkReal x235=((new_r02)*(x232));
IkReal x236=((sj20)*(x232));
IkReal x237=((new_r12)*(x233));
IkReal x238=((sj20)*(x233));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x233)))+(((new_r12)*(x232))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x234)))+(x237)+(x235));
evalcond[2]=((((new_r10)*(x238)))+(((new_r00)*(x236)))+(((cj20)*(new_r20))));
evalcond[3]=((((new_r11)*(x238)))+(((new_r01)*(x236)))+(((cj20)*(new_r21))));
evalcond[4]=((IkReal(-1.00000000000000))+(((sj20)*(x235)))+(((sj20)*(x237)))+(((cj20)*(new_r22))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r22)*(x234)))+(((cj20)*(x235)))+(((cj20)*(x237))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x239=((IkReal(-1.00000000000000))+(new_r22));
IkReal x240=((((IkReal(-1.00000000000000))*(new_r02)*(sj19)))+(((cj19)*(new_r12))));
IkReal x241=((((cj19)*(new_r02)))+(((new_r12)*(sj19))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x239;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x240;
evalcond[5]=x240;
evalcond[6]=x241;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x239;
evalcond[10]=x241;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj19)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj19)))+(((cj19)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj19)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj19)))))+IKsqr(((((new_r10)*(sj19)))+(((cj19)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj19)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj19)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x242=IKsin(j21);
IkReal x243=((IkReal(1.00000000000000))*(sj19));
IkReal x244=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x242)))+(((IkReal(-1.00000000000000))*(new_r00)*(x243)))+(((cj19)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x243)))+(((IkReal(-1.00000000000000))*(x244)))+(((cj19)*(new_r11))));
evalcond[2]=((x242)+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x244)))+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x245=((new_r12)*(sj19));
IkReal x246=((IkReal(1.00000000000000))*(new_r02));
IkReal x247=((((cj19)*(new_r12)))+(((IkReal(-1.00000000000000))*(sj19)*(x246))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x247;
evalcond[5]=x247;
evalcond[6]=((x245)+(((cj19)*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x245)))+(((IkReal(-1.00000000000000))*(cj19)*(x246))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((cj19)*(new_r01)))+(((new_r11)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj19)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x248=IKcos(j21);
IkReal x249=((IkReal(1.00000000000000))*(sj19));
IkReal x250=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x249)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(x250))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x249)))+(((IkReal(-1.00000000000000))*(x248)))+(((cj19)*(new_r11))));
evalcond[2]=((((cj19)*(new_r01)))+(((new_r11)*(sj19)))+(((IkReal(-1.00000000000000))*(x250))));
evalcond[3]=((x248)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj19)))+(((cj19)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj19)))+(((cj19)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj19)))+(((cj19)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x251=IKsin(j21);
IkReal x252=IKcos(j21);
IkReal x253=((IkReal(1.00000000000000))*(sj20));
IkReal x254=((IkReal(1.00000000000000))*(sj19));
IkReal x255=((cj19)*(new_r00));
IkReal x256=((new_r10)*(sj19));
IkReal x257=((new_r11)*(sj19));
IkReal x258=((cj19)*(new_r01));
IkReal x259=((IkReal(1.00000000000000))*(x252));
evalcond[0]=((((sj20)*(x252)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x251)*(x253)))+(new_r21));
evalcond[2]=((((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x254)))+(((IkReal(-1.00000000000000))*(x251))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x254)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(x259))));
evalcond[4]=((x258)+(x257)+(((cj20)*(x251))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x259)))+(x255)+(x256));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x253)))+(x251)+(((cj20)*(x257)))+(((cj20)*(x258))));
evalcond[7]=((((cj20)*(x256)))+(((cj20)*(x255)))+(((IkReal(-1.00000000000000))*(new_r20)*(x253)))+(((IkReal(-1.00000000000000))*(x259))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((new_r21)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj19)))+(((cj19)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj19)))+(((cj19)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((new_r21)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj19)))+(((cj19)*(new_r11)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x260=IKsin(j21);
IkReal x261=IKcos(j21);
IkReal x262=((IkReal(1.00000000000000))*(sj20));
IkReal x263=((IkReal(1.00000000000000))*(sj19));
IkReal x264=((cj19)*(new_r00));
IkReal x265=((new_r10)*(sj19));
IkReal x266=((new_r11)*(sj19));
IkReal x267=((cj19)*(new_r01));
IkReal x268=((IkReal(1.00000000000000))*(x261));
evalcond[0]=((new_r20)+(((sj20)*(x261))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x260)*(x262))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x260)))+(((IkReal(-1.00000000000000))*(new_r00)*(x263)))+(((cj19)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x263)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(x268))));
evalcond[4]=((((cj20)*(x260)))+(x267)+(x266));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x268)))+(x265)+(x264));
evalcond[6]=((((cj20)*(x266)))+(((cj20)*(x267)))+(((IkReal(-1.00000000000000))*(new_r21)*(x262)))+(x260));
evalcond[7]=((((cj20)*(x264)))+(((cj20)*(x265)))+(((IkReal(-1.00000000000000))*(new_r20)*(x262)))+(((IkReal(-1.00000000000000))*(x268))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((gconst53)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst53)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst53)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst53)*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x269=IKsin(j21);
IkReal x270=IKcos(j21);
IkReal x271=((IkReal(1.00000000000000))*(sj20));
IkReal x272=((IkReal(1.00000000000000))*(sj19));
IkReal x273=((cj19)*(new_r00));
IkReal x274=((new_r10)*(sj19));
IkReal x275=((new_r11)*(sj19));
IkReal x276=((cj19)*(new_r01));
IkReal x277=((IkReal(1.00000000000000))*(x270));
evalcond[0]=((new_r20)+(((sj20)*(x270))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x269)*(x271)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x269)))+(((IkReal(-1.00000000000000))*(new_r00)*(x272)))+(((cj19)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x272)))+(((IkReal(-1.00000000000000))*(x277)))+(((cj19)*(new_r11))));
evalcond[4]=((((cj20)*(x269)))+(x276)+(x275));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x277)))+(x274)+(x273));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x271)))+(x269)+(((cj20)*(x275)))+(((cj20)*(x276))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x271)))+(((IkReal(-1.00000000000000))*(x277)))+(((cj20)*(x273)))+(((cj20)*(x274))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((gconst52)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst52)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst52)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst52)*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
evalcond[0]=((((sj20)*(IKcos(j21))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj20)*(IKsin(j21))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x278=((gconst55)*(sj21));
if( IKabs(((new_r12)*(x278))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x278))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((new_r12)*(x278)), ((new_r02)*(x278)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[12];
IkReal x279=IKcos(j19);
IkReal x280=IKsin(j19);
IkReal x281=((IkReal(1.00000000000000))*(cj21));
IkReal x282=((IkReal(1.00000000000000))*(sj20));
IkReal x283=((new_r11)*(x280));
IkReal x284=((new_r00)*(x279));
IkReal x285=((new_r12)*(x280));
IkReal x286=((new_r01)*(x279));
IkReal x287=((IkReal(1.00000000000000))*(x280));
IkReal x288=((new_r10)*(x280));
IkReal x289=((new_r02)*(x279));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x287)))+(((new_r12)*(x279))));
evalcond[1]=((x289)+(x285)+(((IkReal(-1.00000000000000))*(x282))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj21)))+(((IkReal(-1.00000000000000))*(new_r00)*(x287)))+(((new_r10)*(x279))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x287)))+(((IkReal(-1.00000000000000))*(x281)))+(((new_r11)*(x279))));
evalcond[4]=((x286)+(x283)+(((cj20)*(sj21))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x281)))+(x288)+(x284));
evalcond[6]=((((sj20)*(x284)))+(((sj20)*(x288)))+(((cj20)*(new_r20))));
evalcond[7]=((((sj20)*(x286)))+(((sj20)*(x283)))+(((cj20)*(new_r21))));
evalcond[8]=((IkReal(-1.00000000000000))+(((sj20)*(x285)))+(((sj20)*(x289)))+(((cj20)*(new_r22))));
evalcond[9]=((((cj20)*(x289)))+(((cj20)*(x285)))+(((IkReal(-1.00000000000000))*(new_r22)*(x282))));
evalcond[10]=((((cj20)*(x283)))+(((cj20)*(x286)))+(sj21)+(((IkReal(-1.00000000000000))*(new_r21)*(x282))));
evalcond[11]=((((cj20)*(x288)))+(((cj20)*(x284)))+(((IkReal(-1.00000000000000))*(x281)))+(((IkReal(-1.00000000000000))*(new_r20)*(x282))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x290=((gconst54)*(sj20));
if( IKabs(((new_r12)*(x290))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x290))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((new_r12)*(x290)), ((new_r02)*(x290)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[12];
IkReal x291=IKcos(j19);
IkReal x292=IKsin(j19);
IkReal x293=((IkReal(1.00000000000000))*(cj21));
IkReal x294=((IkReal(1.00000000000000))*(sj20));
IkReal x295=((new_r11)*(x292));
IkReal x296=((new_r00)*(x291));
IkReal x297=((new_r12)*(x292));
IkReal x298=((new_r01)*(x291));
IkReal x299=((IkReal(1.00000000000000))*(x292));
IkReal x300=((new_r10)*(x292));
IkReal x301=((new_r02)*(x291));
evalcond[0]=((((new_r12)*(x291)))+(((IkReal(-1.00000000000000))*(new_r02)*(x299))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x294)))+(x301)+(x297));
evalcond[2]=((((new_r10)*(x291)))+(((IkReal(-1.00000000000000))*(sj21)))+(((IkReal(-1.00000000000000))*(new_r00)*(x299))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x299)))+(((new_r11)*(x291)))+(((IkReal(-1.00000000000000))*(x293))));
evalcond[4]=((x298)+(x295)+(((cj20)*(sj21))));
evalcond[5]=((x300)+(x296)+(((IkReal(-1.00000000000000))*(cj20)*(x293))));
evalcond[6]=((((sj20)*(x300)))+(((sj20)*(x296)))+(((cj20)*(new_r20))));
evalcond[7]=((((sj20)*(x298)))+(((sj20)*(x295)))+(((cj20)*(new_r21))));
evalcond[8]=((IkReal(-1.00000000000000))+(((sj20)*(x301)))+(((sj20)*(x297)))+(((cj20)*(new_r22))));
evalcond[9]=((((cj20)*(x301)))+(((cj20)*(x297)))+(((IkReal(-1.00000000000000))*(new_r22)*(x294))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x294)))+(sj21)+(((cj20)*(x295)))+(((cj20)*(x298))));
evalcond[11]=((((cj20)*(x300)))+(((IkReal(-1.00000000000000))*(new_r20)*(x294)))+(((IkReal(-1.00000000000000))*(x293)))+(((cj20)*(x296))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c45a6ca7742b52feb0b51dbc6c01064f"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
